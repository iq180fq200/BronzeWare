{"ast":null,"code":"/*\n * The Original Code is Mozilla Universal charset detector code.\n *\n * The Initial Developer of the Original Code is\n * Netscape Communications Corporation.\n * Portions created by the Initial Developer are Copyright (C) 2001\n * the Initial Developer. All Rights Reserved.\n *\n * Contributor(s):\n *   António Afonso (antonio.afonso gmail.com) - port to JavaScript\n *   Mark Pilgrim - port to Python\n *   Shy Shalom - original C code\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301  USA\n */\nvar constants = require('./constants');\n\nfunction CodingStateMachine(sm) {\n  var self = this;\n\n  function init(sm) {\n    self._mModel = sm;\n    self._mCurrentBytePos = 0;\n    self._mCurrentCharLen = 0;\n    self.reset();\n  }\n\n  this.reset = function () {\n    this._mCurrentState = constants.start;\n  };\n\n  this.nextState = function (c) {\n    // for each byte we get its class\n    // if it is first byte, we also get byte length\n    var byteCls = this._mModel.classTable[c.charCodeAt(0)];\n\n    if (this._mCurrentState == constants.start) {\n      this._mCurrentBytePos = 0;\n      this._mCurrentCharLen = this._mModel.charLenTable[byteCls];\n    } // from byte's class and stateTable, we get its next state\n\n\n    this._mCurrentState = this._mModel.stateTable[this._mCurrentState * this._mModel.classFactor + byteCls];\n    this._mCurrentBytePos++;\n    return this._mCurrentState;\n  };\n\n  this.getCurrentCharLen = function () {\n    return this._mCurrentCharLen;\n  };\n\n  this.getCodingStateMachine = function () {\n    return this._mModel.name;\n  };\n\n  init(sm);\n}\n\nmodule.exports = CodingStateMachine;","map":{"version":3,"sources":["D:/test/frontend/node_modules/jschardet/src/codingstatemachine.js"],"names":["constants","require","CodingStateMachine","sm","self","init","_mModel","_mCurrentBytePos","_mCurrentCharLen","reset","_mCurrentState","start","nextState","c","byteCls","classTable","charCodeAt","charLenTable","stateTable","classFactor","getCurrentCharLen","getCodingStateMachine","name","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAIA,SAAS,GAAGC,OAAO,CAAC,aAAD,CAAvB;;AAEA,SAASC,kBAAT,CAA4BC,EAA5B,EAAgC;AAC5B,MAAIC,IAAI,GAAG,IAAX;;AAEA,WAASC,IAAT,CAAcF,EAAd,EAAkB;AACdC,IAAAA,IAAI,CAACE,OAAL,GAAeH,EAAf;AACAC,IAAAA,IAAI,CAACG,gBAAL,GAAwB,CAAxB;AACAH,IAAAA,IAAI,CAACI,gBAAL,GAAwB,CAAxB;AACAJ,IAAAA,IAAI,CAACK,KAAL;AACH;;AAED,OAAKA,KAAL,GAAa,YAAW;AACpB,SAAKC,cAAL,GAAsBV,SAAS,CAACW,KAAhC;AACH,GAFD;;AAIA,OAAKC,SAAL,GAAiB,UAASC,CAAT,EAAY;AACzB;AACA;AACA,QAAIC,OAAO,GAAG,KAAKR,OAAL,CAAaS,UAAb,CAAwBF,CAAC,CAACG,UAAF,CAAa,CAAb,CAAxB,CAAd;;AACA,QAAI,KAAKN,cAAL,IAAuBV,SAAS,CAACW,KAArC,EAA6C;AACzC,WAAKJ,gBAAL,GAAwB,CAAxB;AACA,WAAKC,gBAAL,GAAwB,KAAKF,OAAL,CAAaW,YAAb,CAA0BH,OAA1B,CAAxB;AACH,KAPwB,CAQzB;;;AACA,SAAKJ,cAAL,GAAsB,KAAKJ,OAAL,CAAaY,UAAb,CAAwB,KAAKR,cAAL,GAAsB,KAAKJ,OAAL,CAAaa,WAAnC,GAAiDL,OAAzE,CAAtB;AACA,SAAKP,gBAAL;AACA,WAAO,KAAKG,cAAZ;AACH,GAZD;;AAcA,OAAKU,iBAAL,GAAyB,YAAW;AAChC,WAAO,KAAKZ,gBAAZ;AACH,GAFD;;AAIA,OAAKa,qBAAL,GAA6B,YAAW;AACpC,WAAO,KAAKf,OAAL,CAAagB,IAApB;AACH,GAFD;;AAIAjB,EAAAA,IAAI,CAACF,EAAD,CAAJ;AACH;;AAEDoB,MAAM,CAACC,OAAP,GAAiBtB,kBAAjB","sourcesContent":["/*\n * The Original Code is Mozilla Universal charset detector code.\n *\n * The Initial Developer of the Original Code is\n * Netscape Communications Corporation.\n * Portions created by the Initial Developer are Copyright (C) 2001\n * the Initial Developer. All Rights Reserved.\n *\n * Contributor(s):\n *   António Afonso (antonio.afonso gmail.com) - port to JavaScript\n *   Mark Pilgrim - port to Python\n *   Shy Shalom - original C code\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301  USA\n */\n\nvar constants = require('./constants')\n\nfunction CodingStateMachine(sm) {\n    var self = this;\n\n    function init(sm) {\n        self._mModel = sm;\n        self._mCurrentBytePos = 0;\n        self._mCurrentCharLen = 0;\n        self.reset();\n    }\n\n    this.reset = function() {\n        this._mCurrentState = constants.start;\n    }\n\n    this.nextState = function(c) {\n        // for each byte we get its class\n        // if it is first byte, we also get byte length\n        var byteCls = this._mModel.classTable[c.charCodeAt(0)];\n        if( this._mCurrentState == constants.start ) {\n            this._mCurrentBytePos = 0;\n            this._mCurrentCharLen = this._mModel.charLenTable[byteCls];\n        }\n        // from byte's class and stateTable, we get its next state\n        this._mCurrentState = this._mModel.stateTable[this._mCurrentState * this._mModel.classFactor + byteCls];\n        this._mCurrentBytePos++;\n        return this._mCurrentState;\n    }\n\n    this.getCurrentCharLen = function() {\n        return this._mCurrentCharLen;\n    }\n\n    this.getCodingStateMachine = function() {\n        return this._mModel.name;\n    }\n\n    init(sm);\n}\n\nmodule.exports = CodingStateMachine\n"]},"metadata":{},"sourceType":"script"}