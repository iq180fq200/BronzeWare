{"ast":null,"code":"/*\n * The Original Code is Mozilla Universal charset detector code.\n *\n * The Initial Developer of the Original Code is\n * Netscape Communications Corporation.\n * Portions created by the Initial Developer are Copyright (C) 2001\n * the Initial Developer. All Rights Reserved.\n *\n * Contributor(s):\n *   António Afonso (antonio.afonso gmail.com) - port to JavaScript\n *   Mark Pilgrim - port to Python\n *   Shy Shalom - original C code\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301  USA\n */\nvar constants = require('./constants');\n\nfunction CharSetProber() {\n  this.reset = function () {\n    this._mState = constants.detecting;\n  };\n\n  this.getCharsetName = function () {\n    return null;\n  };\n\n  this.feed = function (aBuf) {};\n\n  this.getState = function () {\n    return this._mState;\n  };\n\n  this.getConfidence = function () {\n    return 0.0;\n  };\n\n  this.filterHighBitOnly = function (aBuf) {\n    aBuf = aBuf.replace(/[\\x00-\\x7F]+/g, \" \");\n    return aBuf;\n  };\n\n  this.filterWithoutEnglishLetters = function (aBuf) {\n    aBuf = aBuf.replace(/[A-Za-z]+/g, \" \");\n    return aBuf;\n  }; // Input: aBuf is a string containing all different types of characters\n  // Output: a string that contains all alphabetic letters, high-byte characters, and word immediately preceding `>`, but nothing else within `<>`\n  // Ex: input - '¡£º <div blah blah> abcdef</div> apples! * and oranges 9jd93jd>'\n  //     output - '¡£º blah div apples and oranges jd jd '\n\n\n  this.filterWithEnglishLetters = function (aBuf) {\n    var result = '';\n    var inTag = false;\n    var prev = 0;\n\n    for (var curr = 0; curr < aBuf.length; curr++) {\n      var c = aBuf[curr];\n\n      if (c == '>') {\n        inTag = false;\n      } else if (c == '<') {\n        inTag = true;\n      }\n\n      var isAlpha = /[a-zA-Z]/.test(c);\n      var isASCII = /^[\\x00-\\x7F]*$/.test(c);\n\n      if (isASCII && !isAlpha) {\n        if (curr > prev && !inTag) {\n          result = result + aBuf.substring(prev, curr) + ' ';\n        }\n\n        prev = curr + 1;\n      }\n    }\n\n    if (!inTag) {\n      result = result + aBuf.substring(prev);\n    }\n\n    return result;\n  };\n}\n\nmodule.exports = CharSetProber;","map":{"version":3,"sources":["E:/flaskProject/frontend/node_modules/jschardet/src/charsetprober.js"],"names":["constants","require","CharSetProber","reset","_mState","detecting","getCharsetName","feed","aBuf","getState","getConfidence","filterHighBitOnly","replace","filterWithoutEnglishLetters","filterWithEnglishLetters","result","inTag","prev","curr","length","c","isAlpha","test","isASCII","substring","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAIA,SAAS,GAAGC,OAAO,CAAC,aAAD,CAAvB;;AAEA,SAASC,aAAT,GAAyB;AACrB,OAAKC,KAAL,GAAa,YAAW;AACpB,SAAKC,OAAL,GAAeJ,SAAS,CAACK,SAAzB;AACH,GAFD;;AAIA,OAAKC,cAAL,GAAsB,YAAW;AAC7B,WAAO,IAAP;AACH,GAFD;;AAIA,OAAKC,IAAL,GAAY,UAASC,IAAT,EAAe,CAC1B,CADD;;AAGA,OAAKC,QAAL,GAAgB,YAAW;AACvB,WAAO,KAAKL,OAAZ;AACH,GAFD;;AAIA,OAAKM,aAAL,GAAqB,YAAW;AAC5B,WAAO,GAAP;AACH,GAFD;;AAIA,OAAKC,iBAAL,GAAyB,UAASH,IAAT,EAAe;AACpCA,IAAAA,IAAI,GAAGA,IAAI,CAACI,OAAL,CAAa,eAAb,EAA8B,GAA9B,CAAP;AACA,WAAOJ,IAAP;AACH,GAHD;;AAKA,OAAKK,2BAAL,GAAmC,UAASL,IAAT,EAAe;AAC9CA,IAAAA,IAAI,GAAGA,IAAI,CAACI,OAAL,CAAa,YAAb,EAA2B,GAA3B,CAAP;AACA,WAAOJ,IAAP;AACH,GAHD,CAzBqB,CA8BrB;AACA;AACA;AACA;;;AACA,OAAKM,wBAAL,GAAgC,UAASN,IAAT,EAAe;AAC3C,QAAIO,MAAM,GAAG,EAAb;AACA,QAAIC,KAAK,GAAG,KAAZ;AACA,QAAIC,IAAI,GAAG,CAAX;;AAEA,SAAK,IAAIC,IAAI,GAAG,CAAhB,EAAmBA,IAAI,GAAGV,IAAI,CAACW,MAA/B,EAAuCD,IAAI,EAA3C,EAA+C;AAC7C,UAAIE,CAAC,GAAGZ,IAAI,CAACU,IAAD,CAAZ;;AAEA,UAAIE,CAAC,IAAI,GAAT,EAAc;AACZJ,QAAAA,KAAK,GAAG,KAAR;AACD,OAFD,MAEO,IAAII,CAAC,IAAI,GAAT,EAAc;AACnBJ,QAAAA,KAAK,GAAG,IAAR;AACD;;AAED,UAAIK,OAAO,GAAG,WAAWC,IAAX,CAAgBF,CAAhB,CAAd;AACA,UAAIG,OAAO,GAAG,iBAAiBD,IAAjB,CAAsBF,CAAtB,CAAd;;AAEA,UAAIG,OAAO,IAAI,CAACF,OAAhB,EAAyB;AACvB,YAAIH,IAAI,GAAGD,IAAP,IAAe,CAACD,KAApB,EAA2B;AACzBD,UAAAA,MAAM,GAAGA,MAAM,GAAGP,IAAI,CAACgB,SAAL,CAAeP,IAAf,EAAqBC,IAArB,CAAT,GAAsC,GAA/C;AACD;;AAEDD,QAAAA,IAAI,GAAGC,IAAI,GAAG,CAAd;AACD;AACF;;AAED,QAAI,CAACF,KAAL,EAAY;AACVD,MAAAA,MAAM,GAAGA,MAAM,GAAGP,IAAI,CAACgB,SAAL,CAAeP,IAAf,CAAlB;AACD;;AAED,WAAOF,MAAP;AACH,GA/BD;AAgCH;;AAEDU,MAAM,CAACC,OAAP,GAAiBxB,aAAjB","sourcesContent":["/*\n * The Original Code is Mozilla Universal charset detector code.\n *\n * The Initial Developer of the Original Code is\n * Netscape Communications Corporation.\n * Portions created by the Initial Developer are Copyright (C) 2001\n * the Initial Developer. All Rights Reserved.\n *\n * Contributor(s):\n *   António Afonso (antonio.afonso gmail.com) - port to JavaScript\n *   Mark Pilgrim - port to Python\n *   Shy Shalom - original C code\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301  USA\n */\n\nvar constants = require('./constants')\n\nfunction CharSetProber() {\n    this.reset = function() {\n        this._mState = constants.detecting;\n    }\n\n    this.getCharsetName = function() {\n        return null;\n    }\n\n    this.feed = function(aBuf) {\n    }\n\n    this.getState = function() {\n        return this._mState;\n    }\n\n    this.getConfidence = function() {\n        return 0.0;\n    }\n\n    this.filterHighBitOnly = function(aBuf) {\n        aBuf = aBuf.replace(/[\\x00-\\x7F]+/g, \" \");\n        return aBuf;\n    }\n\n    this.filterWithoutEnglishLetters = function(aBuf) {\n        aBuf = aBuf.replace(/[A-Za-z]+/g, \" \");\n        return aBuf;\n    }\n\n    // Input: aBuf is a string containing all different types of characters\n    // Output: a string that contains all alphabetic letters, high-byte characters, and word immediately preceding `>`, but nothing else within `<>`\n    // Ex: input - '¡£º <div blah blah> abcdef</div> apples! * and oranges 9jd93jd>'\n    //     output - '¡£º blah div apples and oranges jd jd '\n    this.filterWithEnglishLetters = function(aBuf) {\n        var result = '';\n        var inTag = false;\n        var prev = 0;\n\n        for (var curr = 0; curr < aBuf.length; curr++) {\n          var c = aBuf[curr];\n\n          if (c == '>') {\n            inTag = false;\n          } else if (c == '<') {\n            inTag = true;\n          }\n\n          var isAlpha = /[a-zA-Z]/.test(c);\n          var isASCII = /^[\\x00-\\x7F]*$/.test(c);\n\n          if (isASCII && !isAlpha) {\n            if (curr > prev && !inTag) {\n              result = result + aBuf.substring(prev, curr) + ' ';\n            }\n\n            prev = curr + 1;\n          }\n        }\n\n        if (!inTag) {\n          result = result + aBuf.substring(prev);\n        }\n\n        return result;\n    }\n}\n\nmodule.exports = CharSetProber\n"]},"metadata":{},"sourceType":"script"}