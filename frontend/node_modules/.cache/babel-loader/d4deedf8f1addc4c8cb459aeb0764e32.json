{"ast":null,"code":"/*\n * The Original Code is Mozilla Universal charset detector code.\n *\n * The Initial Developer of the Original Code is\n * Netscape Communications Corporation.\n * Portions created by the Initial Developer are Copyright (C) 2001\n * the Initial Developer. All Rights Reserved.\n *\n * Contributor(s):\n *   AntÃ³nio Afonso (antonio.afonso gmail.com) - port to JavaScript\n *   Mark Pilgrim - port to Python\n *   Shy Shalom - original C code\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301  USA\n */\nvar jisfreq = require('./jisfreq');\n\nvar euctwfreq = require('./euctwfreq');\n\nvar euckrfreq = require('./euckrfreq');\n\nvar gb2312freq = require('./gb2312freq');\n\nvar big5freq = require('./big5freq');\n\nfunction CharDistributionAnalysis() {\n  var ENOUGH_DATA_THRESHOLD = 1024;\n  var SURE_YES = 0.99;\n  var SURE_NO = 0.01;\n  var MINIMUM_DATA_THRESHOLD = 3;\n  var self = this;\n\n  function init() {\n    self._mCharToFreqOrder = null; // Mapping table to get frequency order from char order (get from GetOrder())\n\n    self._mTableSize = null; // Size of above table\n\n    self._mTypicalDistributionRatio = null; // This is a constant value which varies from language to language, used in calculating confidence.  See http://www.mozilla.org/projects/intl/UniversalCharsetDetection.html for further detail.\n\n    self.reset();\n  }\n  /**\n   * reset analyser, clear any state\n   */\n\n\n  this.reset = function () {\n    this._mDone = false; // If this flag is set to constants.True, detection is done and conclusion has been made\n\n    this._mTotalChars = 0; // Total characters encountered\n\n    this._mFreqChars = 0; // The number of characters whose frequency order is less than 512\n  };\n  /**\n   * feed a character with known length\n   */\n\n\n  this.feed = function (aStr, aCharLen) {\n    if (aCharLen == 2) {\n      // we only care about 2-bytes character in our distribution analysis\n      var order = this.getOrder(aStr);\n    } else {\n      order = -1;\n    }\n\n    if (order >= 0) {\n      this._mTotalChars++; // order is valid\n\n      if (order < this._mTableSize) {\n        if (512 > this._mCharToFreqOrder[order]) {\n          this._mFreqChars++;\n        }\n      }\n    }\n  };\n  /**\n   * return confidence based on existing data\n   */\n\n\n  this.getConfidence = function () {\n    // if we didn't receive any character in our consideration range, return negative answer\n    if (this._mTotalChars <= 0 || this._mFreqChars <= MINIMUM_DATA_THRESHOLD) {\n      return SURE_NO;\n    }\n\n    if (this._mTotalChars != this._mFreqChars) {\n      var r = this._mFreqChars / ((this._mTotalChars - this._mFreqChars) * this._mTypicalDistributionRatio);\n\n      if (r < SURE_YES) {\n        return r;\n      }\n    } // normalize confidence (we don't want to be 100% sure)\n\n\n    return SURE_YES;\n  };\n\n  this.gotEnoughData = function () {\n    // It is not necessary to receive all data to draw conclusion. For charset detection,\n    // certain amount of data is enough\n    return this._mTotalChars > ENOUGH_DATA_THRESHOLD;\n  };\n\n  this.getOrder = function (aStr) {\n    // We do not handle characters based on the original encoding string, but\n    // convert this encoding string to a number, here called order.\n    // This allows multiple encodings of a language to share one frequency table.\n    return -1;\n  };\n\n  init();\n}\n\nexports.CharDistributionAnalysis = CharDistributionAnalysis;\n\nfunction EUCTWDistributionAnalysis() {\n  CharDistributionAnalysis.apply(this);\n  var self = this;\n\n  function init() {\n    self._mCharToFreqOrder = euctwfreq.EUCTWCharToFreqOrder;\n    self._mTableSize = euctwfreq.EUCTW_TABLE_SIZE;\n    self._mTypicalDistributionRatio = euctwfreq.EUCTW_TYPICAL_DISTRIBUTION_RATIO;\n  }\n\n  this.getOrder = function (aStr) {\n    // for euc-TW encoding, we are interested\n    //   first  byte range: 0xc4 -- 0xfe\n    //   second byte range: 0xa1 -- 0xfe\n    // no validation needed here. State machine has done that\n    if (aStr.charCodeAt(0) >= 0xC4) {\n      return 94 * (aStr.charCodeAt(0) - 0xC4) + aStr.charCodeAt(1) - 0xA1;\n    } else {\n      return -1;\n    }\n  };\n\n  init();\n}\n\nEUCTWDistributionAnalysis.prototype = new CharDistributionAnalysis();\nexports.EUCTWDistributionAnalysis = EUCTWDistributionAnalysis;\n\nfunction EUCKRDistributionAnalysis() {\n  CharDistributionAnalysis.apply(this);\n  var self = this;\n\n  function init() {\n    self._mCharToFreqOrder = euckrfreq.EUCKRCharToFreqOrder;\n    self._mTableSize = euckrfreq.EUCKR_TABLE_SIZE;\n    self._mTypicalDistributionRatio = euckrfreq.EUCKR_TYPICAL_DISTRIBUTION_RATIO;\n  }\n\n  this.getOrder = function (aStr) {\n    // for euc-KR encoding, we are interested\n    //   first  byte range: 0xb0 -- 0xfe\n    //   second byte range: 0xa1 -- 0xfe\n    // no validation needed here. State machine has done that\n    if (aStr.charCodeAt(0) >= 0xB0) {\n      return 94 * (aStr.charCodeAt(0) - 0xB0) + aStr.charCodeAt(1) - 0xA1;\n    } else {\n      return -1;\n    }\n  };\n\n  init();\n}\n\nEUCKRDistributionAnalysis.prototype = new CharDistributionAnalysis();\nexports.EUCKRDistributionAnalysis = EUCKRDistributionAnalysis;\n\nfunction GB2312DistributionAnalysis() {\n  CharDistributionAnalysis.apply(this);\n  var self = this;\n\n  function init() {\n    self._mCharToFreqOrder = gb2312freq.GB2312CharToFreqOrder;\n    self._mTableSize = gb2312freq.GB2312_TABLE_SIZE;\n    self._mTypicalDistributionRatio = gb2312freq.GB2312_TYPICAL_DISTRIBUTION_RATIO;\n  }\n\n  this.getOrder = function (aStr) {\n    // for GB2312 encoding, we are interested\n    //  first  byte range: 0xb0 -- 0xfe\n    //  second byte range: 0xa1 -- 0xfe\n    // no validation needed here. State machine has done that\n    if (aStr.charCodeAt(0) >= 0xB0 && aStr.charCodeAt(1) >= 0xA1) {\n      return 94 * (aStr.charCodeAt(0) - 0xB0) + aStr.charCodeAt(1) - 0xA1;\n    } else {\n      return -1;\n    }\n  };\n\n  init();\n}\n\nGB2312DistributionAnalysis.prototype = new CharDistributionAnalysis();\nexports.GB2312DistributionAnalysis = GB2312DistributionAnalysis;\n\nfunction Big5DistributionAnalysis() {\n  CharDistributionAnalysis.apply(this);\n  var self = this;\n\n  function init() {\n    self._mCharToFreqOrder = big5freq.Big5CharToFreqOrder;\n    self._mTableSize = big5freq.BIG5_TABLE_SIZE;\n    self._mTypicalDistributionRatio = big5freq.BIG5_TYPICAL_DISTRIBUTION_RATIO;\n  }\n\n  this.getOrder = function (aStr) {\n    // for big5 encoding, we are interested\n    //   first  byte range: 0xa4 -- 0xfe\n    //   second byte range: 0x40 -- 0x7e , 0xa1 -- 0xfe\n    // no validation needed here. State machine has done that\n    if (aStr.charCodeAt(0) >= 0xA4) {\n      if (aStr.charCodeAt(1) >= 0xA1) {\n        return 157 * (aStr.charCodeAt(0) - 0xA4) + aStr.charCodeAt(1) - 0xA1 + 63;\n      } else {\n        return 157 * (aStr.charCodeAt(0) - 0xA4) + aStr.charCodeAt(1) - 0x40;\n      }\n    } else {\n      return -1;\n    }\n  };\n\n  init();\n}\n\nBig5DistributionAnalysis.prototype = new CharDistributionAnalysis();\nexports.Big5DistributionAnalysis = Big5DistributionAnalysis;\n\nfunction SJISDistributionAnalysis() {\n  CharDistributionAnalysis.apply(this);\n  var self = this;\n\n  function init() {\n    self._mCharToFreqOrder = jisfreq.JISCharToFreqOrder;\n    self._mTableSize = jisfreq.JIS_TABLE_SIZE;\n    self._mTypicalDistributionRatio = jisfreq.JIS_TYPICAL_DISTRIBUTION_RATIO;\n  }\n\n  this.getOrder = function (aStr) {\n    // for sjis encoding, we are interested\n    //   first  byte range: 0x81 -- 0x9f , 0xe0 -- 0xef\n    //   second byte range: 0x40 -- 0x7e,  0x80 -- 0xfc\n    // no validation needed here. State machine has done that\n    if (aStr.charCodeAt(0) >= 0x81 && aStr.charCodeAt(0) <= 0x9F) {\n      var order = 188 * (aStr.charCodeAt(0) - 0x81);\n    } else if (aStr.charCodeAt(0) >= 0xE0 && aStr.charCodeAt(0) <= 0xEF) {\n      order = 188 * (aStr.charCodeAt(0) - 0xE0 + 31);\n    } else {\n      return -1;\n    }\n\n    order += aStr.charCodeAt(1) - 0x40;\n\n    if (aStr.charCodeAt(1) < 0x40 || aStr.charCodeAt(1) === 0x7F || aStr.charCodeAt(1) > 0xFC) {\n      order = -1;\n    }\n\n    return order;\n  };\n\n  init();\n}\n\nSJISDistributionAnalysis.prototype = new CharDistributionAnalysis();\nexports.SJISDistributionAnalysis = SJISDistributionAnalysis;\n\nfunction EUCJPDistributionAnalysis() {\n  CharDistributionAnalysis.apply(this);\n  var self = this;\n\n  function init() {\n    self._mCharToFreqOrder = jisfreq.JISCharToFreqOrder;\n    self._mTableSize = jisfreq.JIS_TABLE_SIZE;\n    self._mTypicalDistributionRatio = jisfreq.JIS_TYPICAL_DISTRIBUTION_RATIO;\n  }\n\n  this.getOrder = function (aStr) {\n    // for euc-JP encoding, we are interested\n    //   first  byte range: 0xa0 -- 0xfe\n    //   second byte range: 0xa1 -- 0xfe\n    // no validation needed here. State machine has done that\n    if (aStr[0] >= \"\\xA0\") {\n      return 94 * (aStr.charCodeAt(0) - 0xA1) + aStr.charCodeAt(1) - 0xA1;\n    } else {\n      return -1;\n    }\n  };\n\n  init();\n}\n\nEUCJPDistributionAnalysis.prototype = new CharDistributionAnalysis();\nexports.EUCJPDistributionAnalysis = EUCJPDistributionAnalysis;","map":{"version":3,"sources":["E:/frontend/node_modules/jschardet/src/chardistribution.js"],"names":["jisfreq","require","euctwfreq","euckrfreq","gb2312freq","big5freq","CharDistributionAnalysis","ENOUGH_DATA_THRESHOLD","SURE_YES","SURE_NO","MINIMUM_DATA_THRESHOLD","self","init","_mCharToFreqOrder","_mTableSize","_mTypicalDistributionRatio","reset","_mDone","_mTotalChars","_mFreqChars","feed","aStr","aCharLen","order","getOrder","getConfidence","r","gotEnoughData","exports","EUCTWDistributionAnalysis","apply","EUCTWCharToFreqOrder","EUCTW_TABLE_SIZE","EUCTW_TYPICAL_DISTRIBUTION_RATIO","charCodeAt","prototype","EUCKRDistributionAnalysis","EUCKRCharToFreqOrder","EUCKR_TABLE_SIZE","EUCKR_TYPICAL_DISTRIBUTION_RATIO","GB2312DistributionAnalysis","GB2312CharToFreqOrder","GB2312_TABLE_SIZE","GB2312_TYPICAL_DISTRIBUTION_RATIO","Big5DistributionAnalysis","Big5CharToFreqOrder","BIG5_TABLE_SIZE","BIG5_TYPICAL_DISTRIBUTION_RATIO","SJISDistributionAnalysis","JISCharToFreqOrder","JIS_TABLE_SIZE","JIS_TYPICAL_DISTRIBUTION_RATIO","EUCJPDistributionAnalysis"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAIA,OAAO,GAAGC,OAAO,CAAC,WAAD,CAArB;;AACA,IAAIC,SAAS,GAAGD,OAAO,CAAC,aAAD,CAAvB;;AACA,IAAIE,SAAS,GAAGF,OAAO,CAAC,aAAD,CAAvB;;AACA,IAAIG,UAAU,GAAGH,OAAO,CAAC,cAAD,CAAxB;;AACA,IAAII,QAAQ,GAAGJ,OAAO,CAAC,YAAD,CAAtB;;AAEA,SAASK,wBAAT,GAAoC;AAChC,MAAIC,qBAAqB,GAAG,IAA5B;AACA,MAAIC,QAAQ,GAAG,IAAf;AACA,MAAIC,OAAO,GAAG,IAAd;AACA,MAAIC,sBAAsB,GAAG,CAA7B;AAEA,MAAIC,IAAI,GAAG,IAAX;;AAEA,WAASC,IAAT,GAAgB;AACZD,IAAAA,IAAI,CAACE,iBAAL,GAAyB,IAAzB,CADY,CACmB;;AAC/BF,IAAAA,IAAI,CAACG,WAAL,GAAmB,IAAnB,CAFY,CAEa;;AACzBH,IAAAA,IAAI,CAACI,0BAAL,GAAkC,IAAlC,CAHY,CAG4B;;AACxCJ,IAAAA,IAAI,CAACK,KAAL;AACH;AAED;AACJ;AACA;;;AACI,OAAKA,KAAL,GAAa,YAAW;AACpB,SAAKC,MAAL,GAAc,KAAd,CADoB,CACC;;AACrB,SAAKC,YAAL,GAAoB,CAApB,CAFoB,CAEG;;AACvB,SAAKC,WAAL,GAAmB,CAAnB,CAHoB,CAGE;AACzB,GAJD;AAMA;AACJ;AACA;;;AACI,OAAKC,IAAL,GAAY,UAASC,IAAT,EAAeC,QAAf,EAAyB;AACjC,QAAIA,QAAQ,IAAI,CAAhB,EAAoB;AAChB;AACA,UAAIC,KAAK,GAAG,KAAKC,QAAL,CAAcH,IAAd,CAAZ;AACH,KAHD,MAGO;AACHE,MAAAA,KAAK,GAAG,CAAC,CAAT;AACH;;AACD,QAAIA,KAAK,IAAI,CAAb,EAAiB;AACb,WAAKL,YAAL,GADa,CAEb;;AACA,UAAIK,KAAK,GAAG,KAAKT,WAAjB,EAA+B;AAC3B,YAAI,MAAM,KAAKD,iBAAL,CAAuBU,KAAvB,CAAV,EAA0C;AACtC,eAAKJ,WAAL;AACH;AACJ;AACJ;AACJ,GAhBD;AAkBA;AACJ;AACA;;;AACI,OAAKM,aAAL,GAAqB,YAAW;AAC5B;AACA,QAAI,KAAKP,YAAL,IAAqB,CAArB,IAA0B,KAAKC,WAAL,IAAoBT,sBAAlD,EAA0E;AACtE,aAAOD,OAAP;AACH;;AACD,QAAI,KAAKS,YAAL,IAAqB,KAAKC,WAA9B,EAA4C;AACxC,UAAIO,CAAC,GAAG,KAAKP,WAAL,IAAoB,CAAC,KAAKD,YAAL,GAAoB,KAAKC,WAA1B,IAAyC,KAAKJ,0BAAlE,CAAR;;AACA,UAAIW,CAAC,GAAGlB,QAAR,EAAmB;AACf,eAAOkB,CAAP;AACH;AACJ,KAV2B,CAY5B;;;AACA,WAAOlB,QAAP;AACH,GAdD;;AAgBA,OAAKmB,aAAL,GAAqB,YAAW;AAC5B;AACA;AACA,WAAO,KAAKT,YAAL,GAAoBX,qBAA3B;AACH,GAJD;;AAMA,OAAKiB,QAAL,GAAgB,UAASH,IAAT,EAAe;AAC3B;AACA;AACA;AACA,WAAO,CAAC,CAAR;AACH,GALD;;AAOAT,EAAAA,IAAI;AACP;;AAEDgB,OAAO,CAACtB,wBAAR,GAAmCA,wBAAnC;;AAEA,SAASuB,yBAAT,GAAqC;AACjCvB,EAAAA,wBAAwB,CAACwB,KAAzB,CAA+B,IAA/B;AAEA,MAAInB,IAAI,GAAG,IAAX;;AAEA,WAASC,IAAT,GAAgB;AACZD,IAAAA,IAAI,CAACE,iBAAL,GAAyBX,SAAS,CAAC6B,oBAAnC;AACApB,IAAAA,IAAI,CAACG,WAAL,GAAmBZ,SAAS,CAAC8B,gBAA7B;AACArB,IAAAA,IAAI,CAACI,0BAAL,GAAkCb,SAAS,CAAC+B,gCAA5C;AACH;;AAED,OAAKT,QAAL,GAAgB,UAASH,IAAT,EAAe;AAC3B;AACA;AACA;AACA;AACA,QAAIA,IAAI,CAACa,UAAL,CAAgB,CAAhB,KAAsB,IAA1B,EAAiC;AAC7B,aAAO,MAAMb,IAAI,CAACa,UAAL,CAAgB,CAAhB,IAAqB,IAA3B,IAAmCb,IAAI,CAACa,UAAL,CAAgB,CAAhB,CAAnC,GAAwD,IAA/D;AACH,KAFD,MAEO;AACH,aAAO,CAAC,CAAR;AACH;AACJ,GAVD;;AAYAtB,EAAAA,IAAI;AACP;;AACDiB,yBAAyB,CAACM,SAA1B,GAAsC,IAAI7B,wBAAJ,EAAtC;AAEAsB,OAAO,CAACC,yBAAR,GAAoCA,yBAApC;;AAEA,SAASO,yBAAT,GAAqC;AACjC9B,EAAAA,wBAAwB,CAACwB,KAAzB,CAA+B,IAA/B;AAEA,MAAInB,IAAI,GAAG,IAAX;;AAEA,WAASC,IAAT,GAAgB;AACZD,IAAAA,IAAI,CAACE,iBAAL,GAAyBV,SAAS,CAACkC,oBAAnC;AACA1B,IAAAA,IAAI,CAACG,WAAL,GAAmBX,SAAS,CAACmC,gBAA7B;AACA3B,IAAAA,IAAI,CAACI,0BAAL,GAAkCZ,SAAS,CAACoC,gCAA5C;AACH;;AAED,OAAKf,QAAL,GAAgB,UAASH,IAAT,EAAe;AAC3B;AACA;AACA;AACA;AACA,QAAIA,IAAI,CAACa,UAAL,CAAgB,CAAhB,KAAsB,IAA1B,EAAiC;AAC7B,aAAO,MAAMb,IAAI,CAACa,UAAL,CAAgB,CAAhB,IAAqB,IAA3B,IAAmCb,IAAI,CAACa,UAAL,CAAgB,CAAhB,CAAnC,GAAwD,IAA/D;AACH,KAFD,MAEO;AACH,aAAO,CAAC,CAAR;AACH;AACJ,GAVD;;AAYAtB,EAAAA,IAAI;AACP;;AACDwB,yBAAyB,CAACD,SAA1B,GAAsC,IAAI7B,wBAAJ,EAAtC;AAEAsB,OAAO,CAACQ,yBAAR,GAAoCA,yBAApC;;AAEA,SAASI,0BAAT,GAAsC;AAClClC,EAAAA,wBAAwB,CAACwB,KAAzB,CAA+B,IAA/B;AAEA,MAAInB,IAAI,GAAG,IAAX;;AAEA,WAASC,IAAT,GAAgB;AACZD,IAAAA,IAAI,CAACE,iBAAL,GAAyBT,UAAU,CAACqC,qBAApC;AACA9B,IAAAA,IAAI,CAACG,WAAL,GAAmBV,UAAU,CAACsC,iBAA9B;AACA/B,IAAAA,IAAI,CAACI,0BAAL,GAAkCX,UAAU,CAACuC,iCAA7C;AACH;;AAED,OAAKnB,QAAL,GAAgB,UAASH,IAAT,EAAe;AAC3B;AACA;AACA;AACA;AACA,QAAIA,IAAI,CAACa,UAAL,CAAgB,CAAhB,KAAsB,IAAtB,IAA8Bb,IAAI,CAACa,UAAL,CAAgB,CAAhB,KAAsB,IAAxD,EAA+D;AAC3D,aAAO,MAAMb,IAAI,CAACa,UAAL,CAAgB,CAAhB,IAAqB,IAA3B,IAAmCb,IAAI,CAACa,UAAL,CAAgB,CAAhB,CAAnC,GAAwD,IAA/D;AACH,KAFD,MAEO;AACH,aAAO,CAAC,CAAR;AACH;AACJ,GAVD;;AAYAtB,EAAAA,IAAI;AACP;;AACD4B,0BAA0B,CAACL,SAA3B,GAAuC,IAAI7B,wBAAJ,EAAvC;AAEAsB,OAAO,CAACY,0BAAR,GAAqCA,0BAArC;;AAEA,SAASI,wBAAT,GAAoC;AAChCtC,EAAAA,wBAAwB,CAACwB,KAAzB,CAA+B,IAA/B;AAEA,MAAInB,IAAI,GAAG,IAAX;;AAEA,WAASC,IAAT,GAAgB;AACZD,IAAAA,IAAI,CAACE,iBAAL,GAAyBR,QAAQ,CAACwC,mBAAlC;AACAlC,IAAAA,IAAI,CAACG,WAAL,GAAmBT,QAAQ,CAACyC,eAA5B;AACAnC,IAAAA,IAAI,CAACI,0BAAL,GAAkCV,QAAQ,CAAC0C,+BAA3C;AACH;;AAED,OAAKvB,QAAL,GAAgB,UAASH,IAAT,EAAe;AAC3B;AACA;AACA;AACA;AACA,QAAIA,IAAI,CAACa,UAAL,CAAgB,CAAhB,KAAsB,IAA1B,EAAiC;AAC7B,UAAIb,IAAI,CAACa,UAAL,CAAgB,CAAhB,KAAsB,IAA1B,EAAiC;AAC7B,eAAO,OAAOb,IAAI,CAACa,UAAL,CAAgB,CAAhB,IAAqB,IAA5B,IAAoCb,IAAI,CAACa,UAAL,CAAgB,CAAhB,CAApC,GAAyD,IAAzD,GAAgE,EAAvE;AACH,OAFD,MAEO;AACH,eAAO,OAAOb,IAAI,CAACa,UAAL,CAAgB,CAAhB,IAAqB,IAA5B,IAAoCb,IAAI,CAACa,UAAL,CAAgB,CAAhB,CAApC,GAAyD,IAAhE;AACH;AACJ,KAND,MAMO;AACH,aAAO,CAAC,CAAR;AACH;AACJ,GAdD;;AAgBAtB,EAAAA,IAAI;AACP;;AACDgC,wBAAwB,CAACT,SAAzB,GAAqC,IAAI7B,wBAAJ,EAArC;AAEAsB,OAAO,CAACgB,wBAAR,GAAmCA,wBAAnC;;AAEA,SAASI,wBAAT,GAAoC;AAChC1C,EAAAA,wBAAwB,CAACwB,KAAzB,CAA+B,IAA/B;AAEA,MAAInB,IAAI,GAAG,IAAX;;AAEA,WAASC,IAAT,GAAgB;AACZD,IAAAA,IAAI,CAACE,iBAAL,GAAyBb,OAAO,CAACiD,kBAAjC;AACAtC,IAAAA,IAAI,CAACG,WAAL,GAAmBd,OAAO,CAACkD,cAA3B;AACAvC,IAAAA,IAAI,CAACI,0BAAL,GAAkCf,OAAO,CAACmD,8BAA1C;AACH;;AAED,OAAK3B,QAAL,GAAgB,UAASH,IAAT,EAAe;AAC3B;AACA;AACA;AACA;AACA,QAAIA,IAAI,CAACa,UAAL,CAAgB,CAAhB,KAAsB,IAAtB,IAA8Bb,IAAI,CAACa,UAAL,CAAgB,CAAhB,KAAsB,IAAxD,EAA+D;AAC3D,UAAIX,KAAK,GAAG,OAAOF,IAAI,CAACa,UAAL,CAAgB,CAAhB,IAAqB,IAA5B,CAAZ;AACH,KAFD,MAEO,IAAIb,IAAI,CAACa,UAAL,CAAgB,CAAhB,KAAsB,IAAtB,IAA8Bb,IAAI,CAACa,UAAL,CAAgB,CAAhB,KAAsB,IAAxD,EAA+D;AAClEX,MAAAA,KAAK,GAAG,OAAOF,IAAI,CAACa,UAAL,CAAgB,CAAhB,IAAqB,IAArB,GAA4B,EAAnC,CAAR;AACH,KAFM,MAEA;AACH,aAAO,CAAC,CAAR;AACH;;AACDX,IAAAA,KAAK,IAAIF,IAAI,CAACa,UAAL,CAAgB,CAAhB,IAAqB,IAA9B;;AACA,QAAIb,IAAI,CAACa,UAAL,CAAgB,CAAhB,IAAqB,IAArB,IAA6Bb,IAAI,CAACa,UAAL,CAAgB,CAAhB,MAAuB,IAApD,IAA4Db,IAAI,CAACa,UAAL,CAAgB,CAAhB,IAAqB,IAArF,EAA2F;AACvFX,MAAAA,KAAK,GAAG,CAAC,CAAT;AACH;;AACD,WAAOA,KAAP;AACH,GAjBD;;AAmBAX,EAAAA,IAAI;AACP;;AACDoC,wBAAwB,CAACb,SAAzB,GAAqC,IAAI7B,wBAAJ,EAArC;AAEAsB,OAAO,CAACoB,wBAAR,GAAmCA,wBAAnC;;AAEA,SAASI,yBAAT,GAAqC;AACjC9C,EAAAA,wBAAwB,CAACwB,KAAzB,CAA+B,IAA/B;AAEA,MAAInB,IAAI,GAAG,IAAX;;AAEA,WAASC,IAAT,GAAgB;AACZD,IAAAA,IAAI,CAACE,iBAAL,GAAyBb,OAAO,CAACiD,kBAAjC;AACAtC,IAAAA,IAAI,CAACG,WAAL,GAAmBd,OAAO,CAACkD,cAA3B;AACAvC,IAAAA,IAAI,CAACI,0BAAL,GAAkCf,OAAO,CAACmD,8BAA1C;AACH;;AAED,OAAK3B,QAAL,GAAgB,UAASH,IAAT,EAAe;AAC3B;AACA;AACA;AACA;AACA,QAAIA,IAAI,CAAC,CAAD,CAAJ,IAAW,MAAf,EAAwB;AACpB,aAAO,MAAMA,IAAI,CAACa,UAAL,CAAgB,CAAhB,IAAqB,IAA3B,IAAmCb,IAAI,CAACa,UAAL,CAAgB,CAAhB,CAAnC,GAAwD,IAA/D;AACH,KAFD,MAEO;AACH,aAAO,CAAC,CAAR;AACH;AACJ,GAVD;;AAYAtB,EAAAA,IAAI;AACP;;AACDwC,yBAAyB,CAACjB,SAA1B,GAAsC,IAAI7B,wBAAJ,EAAtC;AAEAsB,OAAO,CAACwB,yBAAR,GAAoCA,yBAApC","sourcesContent":["/*\n * The Original Code is Mozilla Universal charset detector code.\n *\n * The Initial Developer of the Original Code is\n * Netscape Communications Corporation.\n * Portions created by the Initial Developer are Copyright (C) 2001\n * the Initial Developer. All Rights Reserved.\n *\n * Contributor(s):\n *   AntÃ³nio Afonso (antonio.afonso gmail.com) - port to JavaScript\n *   Mark Pilgrim - port to Python\n *   Shy Shalom - original C code\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301  USA\n */\n\nvar jisfreq = require('./jisfreq');\nvar euctwfreq = require('./euctwfreq');\nvar euckrfreq = require('./euckrfreq');\nvar gb2312freq = require('./gb2312freq');\nvar big5freq = require('./big5freq');\n\nfunction CharDistributionAnalysis() {\n    var ENOUGH_DATA_THRESHOLD = 1024;\n    var SURE_YES = 0.99;\n    var SURE_NO = 0.01;\n    var MINIMUM_DATA_THRESHOLD = 3;\n\n    var self = this;\n\n    function init() {\n        self._mCharToFreqOrder = null; // Mapping table to get frequency order from char order (get from GetOrder())\n        self._mTableSize = null; // Size of above table\n        self._mTypicalDistributionRatio = null; // This is a constant value which varies from language to language, used in calculating confidence.  See http://www.mozilla.org/projects/intl/UniversalCharsetDetection.html for further detail.\n        self.reset();\n    }\n\n    /**\n     * reset analyser, clear any state\n     */\n    this.reset = function() {\n        this._mDone = false; // If this flag is set to constants.True, detection is done and conclusion has been made\n        this._mTotalChars = 0; // Total characters encountered\n        this._mFreqChars = 0; // The number of characters whose frequency order is less than 512\n    }\n\n    /**\n     * feed a character with known length\n     */\n    this.feed = function(aStr, aCharLen) {\n        if( aCharLen == 2 ) {\n            // we only care about 2-bytes character in our distribution analysis\n            var order = this.getOrder(aStr);\n        } else {\n            order = -1;\n        }\n        if( order >= 0 ) {\n            this._mTotalChars++;\n            // order is valid\n            if( order < this._mTableSize ) {\n                if( 512 > this._mCharToFreqOrder[order] ) {\n                    this._mFreqChars++;\n                }\n            }\n        }\n    }\n\n    /**\n     * return confidence based on existing data\n     */\n    this.getConfidence = function() {\n        // if we didn't receive any character in our consideration range, return negative answer\n        if( this._mTotalChars <= 0 || this._mFreqChars <= MINIMUM_DATA_THRESHOLD) {\n            return SURE_NO;\n        }\n        if( this._mTotalChars != this._mFreqChars ) {\n            var r = this._mFreqChars / ((this._mTotalChars - this._mFreqChars) * this._mTypicalDistributionRatio);\n            if( r < SURE_YES ) {\n                return r;\n            }\n        }\n\n        // normalize confidence (we don't want to be 100% sure)\n        return SURE_YES;\n    }\n\n    this.gotEnoughData = function() {\n        // It is not necessary to receive all data to draw conclusion. For charset detection,\n        // certain amount of data is enough\n        return this._mTotalChars > ENOUGH_DATA_THRESHOLD;\n    }\n\n    this.getOrder = function(aStr) {\n        // We do not handle characters based on the original encoding string, but\n        // convert this encoding string to a number, here called order.\n        // This allows multiple encodings of a language to share one frequency table.\n        return -1;\n    }\n\n    init();\n}\n\nexports.CharDistributionAnalysis = CharDistributionAnalysis\n\nfunction EUCTWDistributionAnalysis() {\n    CharDistributionAnalysis.apply(this);\n\n    var self = this;\n\n    function init() {\n        self._mCharToFreqOrder = euctwfreq.EUCTWCharToFreqOrder;\n        self._mTableSize = euctwfreq.EUCTW_TABLE_SIZE;\n        self._mTypicalDistributionRatio = euctwfreq.EUCTW_TYPICAL_DISTRIBUTION_RATIO;\n    }\n\n    this.getOrder = function(aStr) {\n        // for euc-TW encoding, we are interested\n        //   first  byte range: 0xc4 -- 0xfe\n        //   second byte range: 0xa1 -- 0xfe\n        // no validation needed here. State machine has done that\n        if( aStr.charCodeAt(0) >= 0xC4 ) {\n            return 94 * (aStr.charCodeAt(0) - 0xC4) + aStr.charCodeAt(1) - 0xA1;\n        } else {\n            return -1;\n        }\n    }\n\n    init();\n}\nEUCTWDistributionAnalysis.prototype = new CharDistributionAnalysis();\n\nexports.EUCTWDistributionAnalysis = EUCTWDistributionAnalysis\n\nfunction EUCKRDistributionAnalysis() {\n    CharDistributionAnalysis.apply(this);\n\n    var self = this;\n\n    function init() {\n        self._mCharToFreqOrder = euckrfreq.EUCKRCharToFreqOrder;\n        self._mTableSize = euckrfreq.EUCKR_TABLE_SIZE;\n        self._mTypicalDistributionRatio = euckrfreq.EUCKR_TYPICAL_DISTRIBUTION_RATIO;\n    }\n\n    this.getOrder = function(aStr) {\n        // for euc-KR encoding, we are interested\n        //   first  byte range: 0xb0 -- 0xfe\n        //   second byte range: 0xa1 -- 0xfe\n        // no validation needed here. State machine has done that\n        if( aStr.charCodeAt(0) >= 0xB0 ) {\n            return 94 * (aStr.charCodeAt(0) - 0xB0) + aStr.charCodeAt(1) - 0xA1;\n        } else {\n            return -1;\n        }\n    }\n\n    init();\n}\nEUCKRDistributionAnalysis.prototype = new CharDistributionAnalysis();\n\nexports.EUCKRDistributionAnalysis = EUCKRDistributionAnalysis\n\nfunction GB2312DistributionAnalysis() {\n    CharDistributionAnalysis.apply(this);\n\n    var self = this;\n\n    function init() {\n        self._mCharToFreqOrder = gb2312freq.GB2312CharToFreqOrder;\n        self._mTableSize = gb2312freq.GB2312_TABLE_SIZE;\n        self._mTypicalDistributionRatio = gb2312freq.GB2312_TYPICAL_DISTRIBUTION_RATIO;\n    }\n\n    this.getOrder = function(aStr) {\n        // for GB2312 encoding, we are interested\n        //  first  byte range: 0xb0 -- 0xfe\n        //  second byte range: 0xa1 -- 0xfe\n        // no validation needed here. State machine has done that\n        if( aStr.charCodeAt(0) >= 0xB0 && aStr.charCodeAt(1) >= 0xA1 ) {\n            return 94 * (aStr.charCodeAt(0) - 0xB0) + aStr.charCodeAt(1) - 0xA1;\n        } else {\n            return -1;\n        }\n    }\n\n    init();\n}\nGB2312DistributionAnalysis.prototype = new CharDistributionAnalysis();\n\nexports.GB2312DistributionAnalysis = GB2312DistributionAnalysis\n\nfunction Big5DistributionAnalysis() {\n    CharDistributionAnalysis.apply(this);\n\n    var self = this;\n\n    function init() {\n        self._mCharToFreqOrder = big5freq.Big5CharToFreqOrder;\n        self._mTableSize = big5freq.BIG5_TABLE_SIZE;\n        self._mTypicalDistributionRatio = big5freq.BIG5_TYPICAL_DISTRIBUTION_RATIO;\n    }\n\n    this.getOrder = function(aStr) {\n        // for big5 encoding, we are interested\n        //   first  byte range: 0xa4 -- 0xfe\n        //   second byte range: 0x40 -- 0x7e , 0xa1 -- 0xfe\n        // no validation needed here. State machine has done that\n        if( aStr.charCodeAt(0) >= 0xA4 ) {\n            if( aStr.charCodeAt(1) >= 0xA1 ) {\n                return 157 * (aStr.charCodeAt(0) - 0xA4) + aStr.charCodeAt(1) - 0xA1 + 63;\n            } else {\n                return 157 * (aStr.charCodeAt(0) - 0xA4) + aStr.charCodeAt(1) - 0x40;\n            }\n        } else {\n            return -1;\n        }\n    }\n\n    init();\n}\nBig5DistributionAnalysis.prototype = new CharDistributionAnalysis();\n\nexports.Big5DistributionAnalysis = Big5DistributionAnalysis\n\nfunction SJISDistributionAnalysis() {\n    CharDistributionAnalysis.apply(this);\n\n    var self = this;\n\n    function init() {\n        self._mCharToFreqOrder = jisfreq.JISCharToFreqOrder;\n        self._mTableSize = jisfreq.JIS_TABLE_SIZE;\n        self._mTypicalDistributionRatio = jisfreq.JIS_TYPICAL_DISTRIBUTION_RATIO;\n    }\n\n    this.getOrder = function(aStr) {\n        // for sjis encoding, we are interested\n        //   first  byte range: 0x81 -- 0x9f , 0xe0 -- 0xef\n        //   second byte range: 0x40 -- 0x7e,  0x80 -- 0xfc\n        // no validation needed here. State machine has done that\n        if( aStr.charCodeAt(0) >= 0x81 && aStr.charCodeAt(0) <= 0x9F ) {\n            var order = 188 * (aStr.charCodeAt(0) - 0x81);\n        } else if( aStr.charCodeAt(0) >= 0xE0 && aStr.charCodeAt(0) <= 0xEF ) {\n            order = 188 * (aStr.charCodeAt(0) - 0xE0 + 31);\n        } else {\n            return -1;\n        }\n        order += aStr.charCodeAt(1) - 0x40;\n        if( aStr.charCodeAt(1) < 0x40 || aStr.charCodeAt(1) === 0x7F || aStr.charCodeAt(1) > 0xFC) {\n            order = -1;\n        }\n        return order;\n    }\n\n    init();\n}\nSJISDistributionAnalysis.prototype = new CharDistributionAnalysis();\n\nexports.SJISDistributionAnalysis = SJISDistributionAnalysis\n\nfunction EUCJPDistributionAnalysis() {\n    CharDistributionAnalysis.apply(this);\n\n    var self = this;\n\n    function init() {\n        self._mCharToFreqOrder = jisfreq.JISCharToFreqOrder;\n        self._mTableSize = jisfreq.JIS_TABLE_SIZE;\n        self._mTypicalDistributionRatio = jisfreq.JIS_TYPICAL_DISTRIBUTION_RATIO;\n    }\n\n    this.getOrder = function(aStr) {\n        // for euc-JP encoding, we are interested\n        //   first  byte range: 0xa0 -- 0xfe\n        //   second byte range: 0xa1 -- 0xfe\n        // no validation needed here. State machine has done that\n        if( aStr[0] >= \"\\xA0\" ) {\n            return 94 * (aStr.charCodeAt(0) - 0xA1) + aStr.charCodeAt(1) - 0xA1;\n        } else {\n            return -1;\n        }\n    }\n\n    init();\n}\nEUCJPDistributionAnalysis.prototype = new CharDistributionAnalysis();\n\nexports.EUCJPDistributionAnalysis = EUCJPDistributionAnalysis\n"]},"metadata":{},"sourceType":"script"}