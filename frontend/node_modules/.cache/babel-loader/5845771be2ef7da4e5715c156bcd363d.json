{"ast":null,"code":"var _jsxFileName = \"E:\\\\frontend\\\\src\\\\echarts\\\\MyMap.jsx\";\nimport React from 'react';\nimport mapboxgl from 'mapbox-gl'; // import { point as pointHelper } from '@turf/helpers'\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst datasource = require(\"./datasource.json\");\n\nvar longitude = [];\nvar latitude = [];\nvar j = 0;\n\nfor (var i = 0; i < 100; i++) {\n  if (datasource[i][\"经纬度\"] != '空') {\n    longitude[j] = datasource[i][\"经度\"];\n    latitude[j] = datasource[i][\"纬度\"];\n    j++;\n  }\n} // console.log(coordinate[0]);\n\n\nclass MyMap extends React.Component {\n  constructor() {\n    super();\n    this.state = {//  把地图对象存在这里\n    };\n  }\n\n  componentDidMount() {\n    mapboxgl.accessToken = 'pk.eyJ1IjoiemhhbmdqaW5neXVhbiIsImEiOiJja2R5cHhoNXYycGVtMnlteXkwZGViZDc2In0.UhckH-74AgPwMsDhPjparQ';\n    const map = new mapboxgl.Map({\n      container: this.mapContainer,\n      style: 'mapbox://styles/mapbox/satellite-v9',\n      center: [110, 30],\n      zoom: 3,\n      scrollZoom: false\n    });\n    map.on('load', function () {\n      /* on(type,callback)为type事件添加监听器，callback是响应函数*/\n      map.addSource(\"points\", {\n        \"type\": \"geojson\",\n\n        /* geojson类型资源 */\n        \"data\": {\n          /* geojson数据 */\n          \"type\": \"FeatureCollection\",\n          \"features\": [{\n            \"type\": \"Feature\",\n            \"geometry\": {\n              \"type\": \"Feature\",\n              \"coordinates\": [77.03238901390978, 38.913188059745586]\n            },\n            \"properties\": {\n              \"title\": \"Mapbox DC\",\n              \"icon\": \"monument\"\n            }\n          }, {\n            \"type\": \"Feature\",\n            \"geometry\": {\n              \"type\": \"MultiPoint\",\n              \"coordinates\": [[77.03238901390978, 38.913188059745586]]\n            },\n            \"properties\": {\n              // \"title\": \"Mapbox SF\",\n              \"icon\": \"circle\"\n            }\n          }]\n        }\n      });\n      map.addLayer({\n        \"id\": \"points\",\n        \"type\": \"symbol\",\n\n        /* symbol类型layer，一般用来绘制点*/\n        \"source\": \"points\",\n        \"layout\": {\n          \"icon-image\": \"{icon}-15\",\n\n          /* 图标图像 */\n          \"text-field\": \"{title}\",\n\n          /* 使用text标签显示的值，Feature属性使用{域名}格式*/\n          \"text-font\": [\"Open Sans Semibold\", \"Arial Unicode MS Bold\"],\n\n          /* 文本字体 */\n          \"text-offset\": [0, 0.6],\n\n          /* 该属性表示文本偏移锚点的距离，正值表示向右和向下，负值表示向左和向上 */\n          \"text-anchor\": \"top\"\n          /* 该属性设置文本中最接近锚点的部分，top表示文本的顶端放置到最接近锚点的位置 */\n\n        }\n      });\n    });\n    var nav = new mapboxgl.NavigationControl();\n    map.addControl(nav, 'top-left');\n    this.setState({\n      map: map\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"link\", {\n        href: \"https://api.mapbox.com/mapbox-gl-js/v1.12.0/mapbox-gl.css\",\n        rel: \"stylesheet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: el => this.mapContainer = el,\n        style: {\n          height: '90%',\n          width: '95%',\n          position: 'absolute'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default MyMap;","map":{"version":3,"sources":["E:/frontend/src/echarts/MyMap.jsx"],"names":["React","mapboxgl","datasource","require","longitude","latitude","j","i","MyMap","Component","constructor","state","componentDidMount","accessToken","map","Map","container","mapContainer","style","center","zoom","scrollZoom","on","addSource","addLayer","nav","NavigationControl","addControl","setState","render","el","height","width","position"],"mappings":"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","sourcesContent":["import React from 'react'\nimport mapboxgl from 'mapbox-gl';\n// import { point as pointHelper } from '@turf/helpers'\nconst datasource=require(\"./datasource.json\");\nvar longitude=[];\nvar latitude=[];\nvar j=0;\nfor(var i=0;i<100;i++){\n  if(datasource[i][\"经纬度\"]!='空'){\n    longitude[j]=datasource[i][\"经度\"];\n    latitude[j]=datasource[i][\"纬度\"];\n    j++;\n  }\n}\n// console.log(coordinate[0]);\n\nclass MyMap extends React.Component {\n \n    constructor() {\n      super();\n      this.state = {\n        //  把地图对象存在这里\n      };\n    }\n  \n\n  componentDidMount() {\n\n    mapboxgl.accessToken = 'pk.eyJ1IjoiemhhbmdqaW5neXVhbiIsImEiOiJja2R5cHhoNXYycGVtMnlteXkwZGViZDc2In0.UhckH-74AgPwMsDhPjparQ';\n    \n    const map = new mapboxgl.Map({\n    container: this.mapContainer,\n    style: 'mapbox://styles/mapbox/satellite-v9',\n    center: [110, 30],\n    zoom: 3,\n    scrollZoom: false,\n    });\n    map.on('load', function () {        /* on(type,callback)为type事件添加监听器，callback是响应函数*/\n      map.addSource(\"points\", {\n          \"type\": \"geojson\",          /* geojson类型资源 */\n          \"data\": {                   /* geojson数据 */\n              \"type\": \"FeatureCollection\",\n              \"features\": [\n                {\"type\": \"Feature\",\n                \"geometry\": {\n                    \"type\": \"Feature\",\n                    \"coordinates\": [77.03238901390978, 38.913188059745586]\n                },\n                \"properties\": {\n                    \"title\": \"Mapbox DC\",\n                    \"icon\": \"monument\"\n                }\n              } ,\n\n              {\"type\": \"Feature\",\n              \"geometry\": {\n                  \"type\": \"MultiPoint\",\n                  \"coordinates\": [\n                    [77.03238901390978, 38.913188059745586]\n                  ]\n              },\n              \"properties\": {\n                  // \"title\": \"Mapbox SF\",\n                  \"icon\":\"circle\",\n          \n\n              }}\n                  \n              \n            ]\n          }\n      });\n   \n      map.addLayer({\n          \"id\": \"points\",\n          \"type\": \"symbol\",   /* symbol类型layer，一般用来绘制点*/\n          \"source\": \"points\",\n          \"layout\": {\n            \"icon-image\": \"{icon}-15\",   /* 图标图像 */\n            \"text-field\": \"{title}\",     /* 使用text标签显示的值，Feature属性使用{域名}格式*/\n            \"text-font\": [\"Open Sans Semibold\", \"Arial Unicode MS Bold\"],  /* 文本字体 */\n            \"text-offset\": [0, 0.6],     /* 该属性表示文本偏移锚点的距离，正值表示向右和向下，负值表示向左和向上 */\n            \"text-anchor\": \"top\"         /* 该属性设置文本中最接近锚点的部分，top表示文本的顶端放置到最接近锚点的位置 */\n        }\n      });\n  });\n\n    var nav = new mapboxgl.NavigationControl();\n    map.addControl(nav, 'top-left');\n    this.setState({map: map});\n  }\n\n  render() { \n    return (\n      <div>\n        {/* 引入样式文件 */}\n        <link href='https://api.mapbox.com/mapbox-gl-js/v1.12.0/mapbox-gl.css' rel='stylesheet' />\n        {/* 地图容器 */}\n        <div ref={el => this.mapContainer = el} style={{height: '90%', width:'95%', position: 'absolute'}} />\n      </div>\n    );\n  }\n}\n\nexport default MyMap;\n"]},"metadata":{},"sourceType":"module"}