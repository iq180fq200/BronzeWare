{"ast":null,"code":"/*\n * The Original Code is Mozilla Universal charset detector code.\n *\n * The Initial Developer of the Original Code is\n * Netscape Communications Corporation.\n * Portions created by the Initial Developer are Copyright (C) 2001\n * the Initial Developer. All Rights Reserved.\n *\n * Contributor(s):\n *   António Afonso (antonio.afonso gmail.com) - port to JavaScript\n *   Mark Pilgrim - port to Python\n *   Shy Shalom - original C code\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301  USA\n */\nvar constants = require('./constants');\n\nvar CharSetProber = require('./charsetprober');\n\nvar logger = require('./logger');\n\nfunction CharSetGroupProber() {\n  CharSetProber.apply(this);\n  var self = this;\n\n  function init() {\n    self._mActiveNum = 0;\n    self._mProbers = [];\n    self._mBestGuessProber = null;\n  }\n\n  this.reset = function () {\n    CharSetGroupProber.prototype.reset.apply(this);\n    this._mActiveNum = 0;\n\n    for (var i = 0, prober; prober = this._mProbers[i]; i++) {\n      if (prober) {\n        prober.reset();\n        prober.active = true;\n        this._mActiveNum++;\n      }\n    }\n\n    this._mBestGuessProber = null;\n  };\n\n  this.getCharsetName = function () {\n    if (!this._mBestGuessProber) {\n      this.getConfidence();\n      if (!this._mBestGuessProber) return null;\n    }\n\n    return this._mBestGuessProber.getCharsetName();\n  };\n\n  this.feed = function (aBuf) {\n    for (var i = 0, prober; prober = this._mProbers[i]; i++) {\n      if (!prober || !prober.active) continue;\n      var st = prober.feed(aBuf);\n      if (!st) continue;\n\n      if (st == constants.foundIt) {\n        this._mBestGuessProber = prober;\n        return this.getState();\n      } else if (st == constants.notMe) {\n        prober.active = false;\n        this._mActiveNum--;\n\n        if (this._mActiveNum <= 0) {\n          this._mState = constants.notMe;\n          return this.getState();\n        }\n      }\n    }\n\n    return this.getState();\n  };\n\n  this.getConfidence = function () {\n    var st = this.getState();\n\n    if (st == constants.foundIt) {\n      return 0.99;\n    } else if (st == constants.notMe) {\n      return 0.01;\n    }\n\n    var bestConf = 0.0;\n    this._mBestGuessProber = null;\n\n    for (var i = 0, prober; prober = this._mProbers[i]; i++) {\n      if (!prober) continue;\n\n      if (!prober.active) {\n        logger.log(prober.getCharsetName() + \" not active\\n\");\n        continue;\n      }\n\n      var cf = prober.getConfidence();\n      logger.log(prober.getCharsetName() + \" confidence = \" + cf + \"\\n\");\n\n      if (bestConf < cf) {\n        bestConf = cf;\n        this._mBestGuessProber = prober;\n      }\n    }\n\n    if (!this._mBestGuessProber) return 0.0;\n    return bestConf;\n  };\n\n  init();\n}\n\nCharSetGroupProber.prototype = new CharSetProber();\nmodule.exports = CharSetGroupProber;","map":{"version":3,"sources":["E:/flaskProject/frontend/node_modules/jschardet/src/charsetgroupprober.js"],"names":["constants","require","CharSetProber","logger","CharSetGroupProber","apply","self","init","_mActiveNum","_mProbers","_mBestGuessProber","reset","prototype","i","prober","active","getCharsetName","getConfidence","feed","aBuf","st","foundIt","getState","notMe","_mState","bestConf","log","cf","module","exports"],"mappings":"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","sourcesContent":["/*\n * The Original Code is Mozilla Universal charset detector code.\n *\n * The Initial Developer of the Original Code is\n * Netscape Communications Corporation.\n * Portions created by the Initial Developer are Copyright (C) 2001\n * the Initial Developer. All Rights Reserved.\n *\n * Contributor(s):\n *   António Afonso (antonio.afonso gmail.com) - port to JavaScript\n *   Mark Pilgrim - port to Python\n *   Shy Shalom - original C code\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301  USA\n */\n\nvar constants = require('./constants');\nvar CharSetProber = require('./charsetprober');\nvar logger = require('./logger');\n\nfunction CharSetGroupProber() {\n    CharSetProber.apply(this);\n\n    var self = this;\n\n    function init() {\n        self._mActiveNum = 0;\n        self._mProbers = [];\n        self._mBestGuessProber = null;\n    }\n\n    this.reset = function() {\n        CharSetGroupProber.prototype.reset.apply(this);\n        this._mActiveNum = 0;\n        for( var i = 0, prober; prober = this._mProbers[i]; i++ ) {\n            if( prober ) {\n                prober.reset();\n                prober.active = true;\n                this._mActiveNum++;\n            }\n        }\n        this._mBestGuessProber = null;\n    }\n\n    this.getCharsetName = function() {\n        if( !this._mBestGuessProber ) {\n            this.getConfidence();\n            if( !this._mBestGuessProber ) return null;\n        }\n        return this._mBestGuessProber.getCharsetName();\n    }\n\n    this.feed = function(aBuf) {\n        for( var i = 0, prober; prober = this._mProbers[i]; i++ ) {\n            if( !prober || !prober.active ) continue;\n            var st = prober.feed(aBuf);\n            if( !st ) continue;\n            if( st == constants.foundIt ) {\n                this._mBestGuessProber = prober;\n                return this.getState();\n            } else if( st == constants.notMe ) {\n                prober.active = false;\n                this._mActiveNum--;\n                if( this._mActiveNum <= 0 ) {\n                    this._mState = constants.notMe;\n                    return this.getState();\n                }\n            }\n        }\n        return this.getState();\n    }\n\n    this.getConfidence = function() {\n        var st = this.getState();\n        if( st == constants.foundIt ) {\n            return 0.99;\n        } else if( st == constants.notMe ) {\n            return 0.01;\n        }\n        var bestConf = 0.0;\n        this._mBestGuessProber = null;\n        for( var i = 0, prober; prober = this._mProbers[i]; i++ ) {\n            if( !prober ) continue;\n            if( !prober.active ) {\n                logger.log(prober.getCharsetName() + \" not active\\n\");\n                continue;\n            }\n            var cf = prober.getConfidence();\n            logger.log(prober.getCharsetName() + \" confidence = \" + cf + \"\\n\");\n            if( bestConf < cf ) {\n                bestConf = cf;\n                this._mBestGuessProber = prober;\n            }\n        }\n        if( !this._mBestGuessProber ) return 0.0;\n        return bestConf;\n    }\n\n    init();\n}\nCharSetGroupProber.prototype = new CharSetProber();\n\nmodule.exports = CharSetGroupProber\n"]},"metadata":{},"sourceType":"script"}