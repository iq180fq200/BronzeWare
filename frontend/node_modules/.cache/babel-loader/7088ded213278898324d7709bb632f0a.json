{"ast":null,"code":"/*\n * The Original Code is Mozilla Universal charset detector code.\n *\n * The Initial Developer of the Original Code is\n * Netscape Communications Corporation.\n * Portions created by the Initial Developer are Copyright (C) 2001\n * the Initial Developer. All Rights Reserved.\n *\n * Contributor(s):\n *   António Afonso (antonio.afonso gmail.com) - port to JavaScript\n *   Mark Pilgrim - port to Python\n *   Shy Shalom - original C code\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301  USA\n */\nvar CodingStateMachine = require('./codingstatemachine');\n\nvar CharSetProber = require('./charsetprober');\n\nvar constants = require('./constants');\n\nvar UTF8SMModel = require('./mbcssm/utf8');\n\nfunction UTF8Prober() {\n  CharSetProber.apply(this);\n  var ONE_CHAR_PROB = 0.5;\n  var self = this;\n\n  function init() {\n    self._mCodingSM = new CodingStateMachine(UTF8SMModel);\n    self.reset();\n  }\n\n  this.reset = function () {\n    UTF8Prober.prototype.reset.apply(this);\n\n    this._mCodingSM.reset();\n\n    this._mNumOfMBChar = 0;\n    this._mMBCharLen = 0;\n    this._mFullLen = 0;\n    this._mBasicAsciiLen = 0;\n  };\n\n  this.getCharsetName = function () {\n    return \"UTF-8\";\n  };\n\n  this.feed = function (aBuf) {\n    this._mFullLen += aBuf.length;\n\n    for (var i = 0, c; i < aBuf.length; i++) {\n      c = aBuf[i];\n\n      var codingState = this._mCodingSM.nextState(c);\n\n      if (codingState == constants.error) {\n        this._mState = constants.notMe;\n        break;\n      } else if (codingState == constants.itsMe) {\n        this._mState = constants.foundIt;\n        break;\n      } else if (codingState == constants.start) {\n        if (this._mCodingSM.getCurrentCharLen() >= 2) {\n          this._mNumOfMBChar++;\n          this._mMBCharLen += this._mCodingSM.getCurrentCharLen();\n        } else if (c.charCodeAt(0) < 128) {\n          // codes higher than 127 are extended ASCII\n          this._mBasicAsciiLen++;\n        }\n      }\n    }\n\n    if (this.getState() == constants.detecting) {\n      if (this.getConfidence() > constants.SHORTCUT_THRESHOLD) {\n        this._mState = constants.foundIt;\n      }\n    }\n\n    return this.getState();\n  };\n\n  this.getConfidence = function () {\n    var unlike = 0.99;\n    var mbCharRatio = 0;\n    var nonBasciAsciiLen = this._mFullLen - this._mBasicAsciiLen;\n\n    if (nonBasciAsciiLen > 0) {\n      mbCharRatio = this._mMBCharLen / nonBasciAsciiLen;\n    }\n\n    if (this._mNumOfMBChar < 6 && mbCharRatio <= 0.6) {\n      unlike *= Math.pow(ONE_CHAR_PROB, this._mNumOfMBChar);\n      return 1 - unlike;\n    } else {\n      return unlike;\n    }\n  };\n\n  init();\n}\n\nUTF8Prober.prototype = new CharSetProber();\nmodule.exports = UTF8Prober;","map":{"version":3,"sources":["E:/flaskProject/frontend/node_modules/jschardet/src/utf8prober.js"],"names":["CodingStateMachine","require","CharSetProber","constants","UTF8SMModel","UTF8Prober","apply","ONE_CHAR_PROB","self","init","_mCodingSM","reset","prototype","_mNumOfMBChar","_mMBCharLen","_mFullLen","_mBasicAsciiLen","getCharsetName","feed","aBuf","length","i","c","codingState","nextState","error","_mState","notMe","itsMe","foundIt","start","getCurrentCharLen","charCodeAt","getState","detecting","getConfidence","SHORTCUT_THRESHOLD","unlike","mbCharRatio","nonBasciAsciiLen","Math","pow","module","exports"],"mappings":"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","sourcesContent":["/*\n * The Original Code is Mozilla Universal charset detector code.\n *\n * The Initial Developer of the Original Code is\n * Netscape Communications Corporation.\n * Portions created by the Initial Developer are Copyright (C) 2001\n * the Initial Developer. All Rights Reserved.\n *\n * Contributor(s):\n *   António Afonso (antonio.afonso gmail.com) - port to JavaScript\n *   Mark Pilgrim - port to Python\n *   Shy Shalom - original C code\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301  USA\n */\n\nvar CodingStateMachine = require('./codingstatemachine');\nvar CharSetProber = require('./charsetprober');\nvar constants = require('./constants');\nvar UTF8SMModel = require('./mbcssm/utf8');\n\nfunction UTF8Prober() {\n    CharSetProber.apply(this);\n\n    var ONE_CHAR_PROB = 0.5;\n    var self = this;\n\n    function init() {\n        self._mCodingSM = new CodingStateMachine(UTF8SMModel);\n        self.reset();\n    }\n\n    this.reset = function() {\n        UTF8Prober.prototype.reset.apply(this);\n        this._mCodingSM.reset();\n        this._mNumOfMBChar = 0;\n        this._mMBCharLen = 0;\n        this._mFullLen = 0;\n        this._mBasicAsciiLen = 0;\n    }\n\n    this.getCharsetName = function() {\n        return \"UTF-8\";\n    }\n\n    this.feed = function(aBuf) {\n        this._mFullLen += aBuf.length;\n        for( var i = 0, c; i < aBuf.length; i++ ) {\n            c = aBuf[i];\n            var codingState = this._mCodingSM.nextState(c);\n            if( codingState == constants.error ) {\n                this._mState = constants.notMe;\n                break;\n            } else if( codingState == constants.itsMe ) {\n                this._mState = constants.foundIt;\n                break;\n            } else if( codingState == constants.start ) {\n                if( this._mCodingSM.getCurrentCharLen() >= 2 ) {\n                    this._mNumOfMBChar++;\n                    this._mMBCharLen += this._mCodingSM.getCurrentCharLen();\n                } else if( c.charCodeAt(0) < 128 ) { // codes higher than 127 are extended ASCII\n                    this._mBasicAsciiLen++;\n                }\n            }\n        }\n\n        if( this.getState() == constants.detecting ) {\n            if( this.getConfidence() > constants.SHORTCUT_THRESHOLD ) {\n                this._mState = constants.foundIt;\n            }\n        }\n\n        return this.getState();\n    }\n\n    this.getConfidence = function() {\n        var unlike = 0.99;\n        var mbCharRatio = 0;\n        var nonBasciAsciiLen = (this._mFullLen - this._mBasicAsciiLen);\n        if( nonBasciAsciiLen > 0 ) {\n            mbCharRatio = this._mMBCharLen / nonBasciAsciiLen;\n        }\n        if( this._mNumOfMBChar < 6 && mbCharRatio <= 0.6 ) {\n            unlike *= Math.pow(ONE_CHAR_PROB, this._mNumOfMBChar);\n            return 1 - unlike;\n        } else {\n            return unlike;\n        }\n    }\n\n    init();\n}\nUTF8Prober.prototype = new CharSetProber();\n\nmodule.exports = UTF8Prober;\n"]},"metadata":{},"sourceType":"script"}