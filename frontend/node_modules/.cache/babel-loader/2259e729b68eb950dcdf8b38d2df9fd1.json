{"ast":null,"code":"var _jsxFileName = \"E:\\\\flaskProject\\\\frontend\\\\src\\\\csvdemo.jsx\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'antd/dist/antd.css';\nimport './index.css';\nimport { Upload } from 'antd';\nimport { Layout, Menu, Breadcrumb, Button, Space, Card } from 'antd';\nimport { UserOutlined, LaptopOutlined, NotificationOutlined } from '@ant-design/icons';\nimport Papa from 'papaparse';\nimport jschardet from 'jschardet';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  SubMenu\n} = Menu;\nconst {\n  Header,\n  Content,\n  Sider\n} = Layout;\n\nclass Csvdemo extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.checkEncoding = base64Str => {\n      //这种方式得到的是一种二进制串\n      const str = atob(base64Str.split(\";base64,\")[1]); // atob  方法 Window 对象 定义和用法 atob() 方法用于解码使用 base-64 编码的字符\n      //要用二进制格式\n\n      let encoding = jschardet.detect(str);\n      encoding = encoding.encoding; // 有时候会识别错误\n\n      if (encoding == \"windows-1252\") {\n        encoding = \"ANSI\";\n      }\n    };\n\n    this.state = {\n      csvParseData: []\n    };\n  }\n\n  render() {\n    const _this = this;\n\n    const props = {\n      beforeUpload: file => {\n        const fReader = new FileReader();\n        fReader.readAsDataURL(file); //  readAsDataURL 读取本地文件 得到的是一个base64值\n\n        fReader.onload = function (evt) {\n          // 读取文件成功\n          const data = evt.target.result;\n\n          const encoding = _this.checkEncoding(data); //papaparse.js 用来解析转换成二维数组\n\n\n          Papa.parse(file, {\n            encoding: encoding,\n            complete: function (results) {\n              // UTF8 \\r\\n与\\n混用时有可能会出问题\n              const res = results.data;\n\n              if (res[res.length - 1] === \"\") {\n                //去除最后的空行 有些解析数据尾部会多出空格\n                res.pop();\n              } // 当前res 就是二维数组的值 数据拿到了 那么在前端如何处理渲染 就根据需求再做进一步操作了\n\n\n              _this.setState(res);\n            }\n          });\n        };\n\n        return false;\n      }\n    };\n    return /*#__PURE__*/_jsxDEV(Upload, { ...props,\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        children: [/*#__PURE__*/_jsxDEV(Upload, {\n          type: \"upload\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 9\n        }, this), \" \\u70B9\\u51FB\\u4E0A\\u4F20csv\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Csvdemo;","map":{"version":3,"sources":["E:/flaskProject/frontend/src/csvdemo.jsx"],"names":["React","ReactDOM","Upload","Layout","Menu","Breadcrumb","Button","Space","Card","UserOutlined","LaptopOutlined","NotificationOutlined","Papa","jschardet","SubMenu","Header","Content","Sider","Csvdemo","Component","constructor","props","checkEncoding","base64Str","str","atob","split","encoding","detect","state","csvParseData","render","_this","beforeUpload","file","fReader","FileReader","readAsDataURL","onload","evt","data","target","result","parse","complete","results","res","length","pop","setState"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,oBAAP;AACA,OAAO,aAAP;AACA,SAASC,MAAT,QAAuB,MAAvB;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,UAAvB,EAAkCC,MAAlC,EAAyCC,KAAzC,EAA+CC,IAA/C,QAA0D,MAA1D;AACA,SAASC,YAAT,EAAuBC,cAAvB,EAAuCC,oBAAvC,QAAmE,mBAAnE;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,SAAP,MAAsB,WAAtB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAcV,IAApB;AACA,MAAM;AAAEW,EAAAA,MAAF;AAAUC,EAAAA,OAAV;AAAmBC,EAAAA;AAAnB,IAA6Bd,MAAnC;;AAEA,MAAMe,OAAN,SAAsBlB,KAAK,CAACmB,SAA5B,CAAqC;AACjCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAMrBC,aANqB,GAMJC,SAAD,IAAe;AAC7B;AACA,YAAMC,GAAG,GAAGC,IAAI,CAACF,SAAS,CAACG,KAAV,CAAgB,UAAhB,EAA4B,CAA5B,CAAD,CAAhB,CAF6B,CAEqB;AAClD;;AAEA,UAAIC,QAAQ,GAAGd,SAAS,CAACe,MAAV,CAAiBJ,GAAjB,CAAf;AACAG,MAAAA,QAAQ,GAAGA,QAAQ,CAACA,QAApB,CAN6B,CAO7B;;AACA,UAAGA,QAAQ,IAAI,cAAf,EAA8B;AAC5BA,QAAAA,QAAQ,GAAG,MAAX;AACD;AACF,KAjBoB;;AAEf,SAAKE,KAAL,GAAa;AACbC,MAAAA,YAAY,EAAE;AADD,KAAb;AAGL;;AAaDC,EAAAA,MAAM,GAAE;AACN,UAAMC,KAAK,GAAG,IAAd;;AACA,UAAMX,KAAK,GAAG;AACZY,MAAAA,YAAY,EAAEC,IAAI,IAAI;AACpB,cAAMC,OAAO,GAAG,IAAIC,UAAJ,EAAhB;AACAD,QAAAA,OAAO,CAACE,aAAR,CAAsBH,IAAtB,EAFoB,CAES;;AAC7BC,QAAAA,OAAO,CAACG,MAAR,GAAiB,UAASC,GAAT,EAAa;AAAC;AAC7B,gBAAMC,IAAI,GAAGD,GAAG,CAACE,MAAJ,CAAWC,MAAxB;;AACA,gBAAMf,QAAQ,GAAGK,KAAK,CAACV,aAAN,CAAoBkB,IAApB,CAAjB,CAF4B,CAG5B;;;AACA5B,UAAAA,IAAI,CAAC+B,KAAL,CAAWT,IAAX,EAAiB;AACfP,YAAAA,QAAQ,EAAEA,QADK;AAEfiB,YAAAA,QAAQ,EAAE,UAASC,OAAT,EAAkB;AAAS;AACnC,oBAAMC,GAAG,GAAGD,OAAO,CAACL,IAApB;;AACA,kBAAGM,GAAG,CAACA,GAAG,CAACC,MAAJ,GAAa,CAAd,CAAH,KAAwB,EAA3B,EAA8B;AAAK;AACjCD,gBAAAA,GAAG,CAACE,GAAJ;AACD,eAJyB,CAK1B;;;AACAhB,cAAAA,KAAK,CAACiB,QAAN,CAAeH,GAAf;AACD;AATc,WAAjB;AAYD,SAhBD;;AAiBA,eAAO,KAAP;AACD;AAtBW,KAAd;AAwBA,wBACE,QAAC,MAAD,OAAYzB,KAAZ;AAAA,6BACA,QAAC,MAAD;AAAA,gCACE,QAAC,MAAD;AAAQ,UAAA,IAAI,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,gBADF;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,YADF;AAOD;;AApDkC;;AAsDrC,eAAgBH,OAAhB","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'antd/dist/antd.css';\r\nimport './index.css';\r\nimport { Upload } from 'antd';\r\nimport { Layout, Menu, Breadcrumb,Button,Space,Card} from 'antd';\r\nimport { UserOutlined, LaptopOutlined, NotificationOutlined } from '@ant-design/icons';\r\nimport Papa from 'papaparse';\r\nimport jschardet from 'jschardet';\r\nconst { SubMenu } = Menu;\r\nconst { Header, Content, Sider } = Layout;\r\n\r\nclass Csvdemo extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n        csvParseData: [],\r\n    };\r\n  }\r\n  checkEncoding = (base64Str) => {\r\n    //这种方式得到的是一种二进制串\r\n    const str = atob(base64Str.split(\";base64,\")[1]); // atob  方法 Window 对象 定义和用法 atob() 方法用于解码使用 base-64 编码的字符\r\n    //要用二进制格式\r\n\r\n    let encoding = jschardet.detect(str);\r\n    encoding = encoding.encoding;\r\n    // 有时候会识别错误\r\n    if(encoding == \"windows-1252\"){\r\n      encoding = \"ANSI\";\r\n    }\r\n  }\r\n  render(){\r\n    const _this = this;\r\n    const props = {\r\n      beforeUpload: file => {\r\n        const fReader = new FileReader();\r\n        fReader.readAsDataURL(file); //  readAsDataURL 读取本地文件 得到的是一个base64值\r\n        fReader.onload = function(evt){// 读取文件成功\r\n          const data = evt.target.result;\r\n          const encoding = _this.checkEncoding(data);\r\n          //papaparse.js 用来解析转换成二维数组\r\n          Papa.parse(file, {\r\n            encoding: encoding,\r\n            complete: function(results) {        // UTF8 \\r\\n与\\n混用时有可能会出问题\r\n              const res = results.data;\r\n              if(res[res.length - 1] === \"\"){    //去除最后的空行 有些解析数据尾部会多出空格\r\n                res.pop();\r\n              }\r\n              // 当前res 就是二维数组的值 数据拿到了 那么在前端如何处理渲染 就根据需求再做进一步操作了\r\n              _this.setState(res);\r\n            }\r\n          });\r\n\r\n        }\r\n        return false;\r\n      },\r\n    };\r\n    return(\r\n      <Upload {...props}>\r\n      <Button>\r\n        <Upload type=\"upload\" /> 点击上传csv\r\n      </Button>\r\n    </Upload>\r\n    )\r\n  }\r\n}\r\nexport  default Csvdemo"]},"metadata":{},"sourceType":"module"}