{"ast":null,"code":"/*\n * The Original Code is Mozilla Universal charset detector code.\n *\n * The Initial Developer of the Original Code is\n * Netscape Communications Corporation.\n * Portions created by the Initial Developer are Copyright (C) 2001\n * the Initial Developer. All Rights Reserved.\n *\n * Contributor(s):\n *   António Afonso (antonio.afonso gmail.com) - port to JavaScript\n *   Mark Pilgrim - port to Python\n *   Shy Shalom - original C code\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301  USA\n */\nvar CharSetProber = require('./charsetprober');\n\nvar constants = require('./constants');\n\nvar logger = require('./logger');\n\nfunction MultiByteCharSetProber() {\n  CharSetProber.apply(this);\n  var self = this;\n\n  function init() {\n    self._mDistributionAnalyzer = null;\n    self._mCodingSM = null; //self._mLastChar = [\"\\x00\", \"\\x00\"];\n\n    self._mLastChar = \"\\x00\\x00\";\n  }\n\n  this.reset = function () {\n    MultiByteCharSetProber.prototype.reset.apply(this);\n\n    if (this._mCodingSM) {\n      this._mCodingSM.reset();\n    }\n\n    if (this._mDistributionAnalyzer) {\n      this._mDistributionAnalyzer.reset();\n    } //this._mLastChar = [\"\\x00\", \"\\x00\"];\n\n\n    this._mLastChar = \"\\x00\\x00\";\n  };\n\n  this.getCharsetName = function () {};\n\n  this.feed = function (aBuf) {\n    var aLen = aBuf.length;\n\n    for (var i = 0; i < aLen; i++) {\n      var codingState = this._mCodingSM.nextState(aBuf[i]);\n\n      if (codingState == constants.error) {\n        logger.log(this.getCharsetName() + \" prober hit error at byte \" + i + \"\\n\");\n        this._mState = constants.notMe;\n        break;\n      } else if (codingState == constants.itsMe) {\n        this._mState = constants.foundIt;\n        break;\n      } else if (codingState == constants.start) {\n        var charLen = this._mCodingSM.getCurrentCharLen();\n\n        if (i == 0) {\n          this._mLastChar[1] = aBuf[0];\n\n          this._mDistributionAnalyzer.feed(this._mLastChar, charLen);\n        } else {\n          this._mDistributionAnalyzer.feed(aBuf.slice(i - 1, i + 1), charLen);\n        }\n      }\n    }\n\n    this._mLastChar[0] = aBuf[aLen - 1];\n\n    if (this.getState() == constants.detecting) {\n      if (this._mDistributionAnalyzer.gotEnoughData() && this.getConfidence() > constants.SHORTCUT_THRESHOLD) {\n        this._mState = constants.foundIt;\n      }\n    }\n\n    return this.getState();\n  };\n\n  this.getConfidence = function () {\n    return this._mDistributionAnalyzer.getConfidence();\n  };\n}\n\nMultiByteCharSetProber.prototype = new CharSetProber();\nmodule.exports = MultiByteCharSetProber;","map":{"version":3,"sources":["E:/flaskProject/frontend/node_modules/jschardet/src/mbcharsetprober.js"],"names":["CharSetProber","require","constants","logger","MultiByteCharSetProber","apply","self","init","_mDistributionAnalyzer","_mCodingSM","_mLastChar","reset","prototype","getCharsetName","feed","aBuf","aLen","length","i","codingState","nextState","error","log","_mState","notMe","itsMe","foundIt","start","charLen","getCurrentCharLen","slice","getState","detecting","gotEnoughData","getConfidence","SHORTCUT_THRESHOLD","module","exports"],"mappings":"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","sourcesContent":["/*\n * The Original Code is Mozilla Universal charset detector code.\n *\n * The Initial Developer of the Original Code is\n * Netscape Communications Corporation.\n * Portions created by the Initial Developer are Copyright (C) 2001\n * the Initial Developer. All Rights Reserved.\n *\n * Contributor(s):\n *   António Afonso (antonio.afonso gmail.com) - port to JavaScript\n *   Mark Pilgrim - port to Python\n *   Shy Shalom - original C code\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301  USA\n */\n\nvar CharSetProber = require('./charsetprober');\nvar constants = require('./constants');\nvar logger = require('./logger');\n\n function MultiByteCharSetProber() {\n    CharSetProber.apply(this);\n\n    var self = this;\n\n    function init() {\n        self._mDistributionAnalyzer = null;\n        self._mCodingSM = null;\n        //self._mLastChar = [\"\\x00\", \"\\x00\"];\n        self._mLastChar = \"\\x00\\x00\";\n    }\n\n    this.reset = function() {\n        MultiByteCharSetProber.prototype.reset.apply(this);\n        if( this._mCodingSM ) {\n            this._mCodingSM.reset();\n        }\n        if( this._mDistributionAnalyzer ) {\n            this._mDistributionAnalyzer.reset();\n        }\n        //this._mLastChar = [\"\\x00\", \"\\x00\"];\n        this._mLastChar = \"\\x00\\x00\";\n    }\n\n    this.getCharsetName = function() {\n    }\n\n    this.feed = function(aBuf) {\n        var aLen = aBuf.length;\n        for( var i = 0; i < aLen; i++ ) {\n            var codingState = this._mCodingSM.nextState(aBuf[i]);\n            if( codingState == constants.error ) {\n                logger.log(this.getCharsetName() + \" prober hit error at byte \" + i + \"\\n\");\n                this._mState = constants.notMe;\n                break;\n            } else if( codingState == constants.itsMe ) {\n                this._mState = constants.foundIt;\n                break;\n            } else if( codingState == constants.start ) {\n                var charLen = this._mCodingSM.getCurrentCharLen();\n                if( i == 0 ) {\n                    this._mLastChar[1] = aBuf[0];\n                    this._mDistributionAnalyzer.feed(this._mLastChar, charLen);\n                } else {\n                    this._mDistributionAnalyzer.feed(aBuf.slice(i-1,i+1), charLen);\n                }\n            }\n        }\n\n        this._mLastChar[0] = aBuf[aLen - 1];\n\n        if( this.getState() == constants.detecting ) {\n            if( this._mDistributionAnalyzer.gotEnoughData() &&\n                this.getConfidence() > constants.SHORTCUT_THRESHOLD ) {\n                this._mState = constants.foundIt;\n            }\n        }\n\n        return this.getState();\n    }\n\n    this.getConfidence = function() {\n        return this._mDistributionAnalyzer.getConfidence();\n    }\n}\nMultiByteCharSetProber.prototype = new CharSetProber();\n\nmodule.exports = MultiByteCharSetProber\n"]},"metadata":{},"sourceType":"script"}