{"ast":null,"code":"/*\n * The Original Code is Mozilla Universal charset detector code.\n *\n * The Initial Developer of the Original Code is\n * Netscape Communications Corporation.\n * Portions created by the Initial Developer are Copyright (C) 2001\n * the Initial Developer. All Rights Reserved.\n *\n * Contributor(s):\n *   António Afonso (antonio.afonso gmail.com) - port to JavaScript\n *   Mark Pilgrim - port to Python\n *   Shy Shalom - original C code\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301  USA\n */\nvar CharSetProber = require('./charsetprober');\n\nvar CodingStateMachine = require('./codingstatemachine');\n\nvar escsm = require('./escsm');\n\nvar constants = require('./constants');\n\nfunction EscCharSetProber() {\n  CharSetProber.apply(this);\n  var self = this;\n\n  function init() {\n    self._mCodingSM = [new CodingStateMachine(escsm.HZSMModel), new CodingStateMachine(escsm.ISO2022CNSMModel), new CodingStateMachine(escsm.ISO2022JPSMModel), new CodingStateMachine(escsm.ISO2022KRSMModel)];\n    self.reset();\n  }\n\n  this.reset = function () {\n    EscCharSetProber.prototype.reset.apply(this);\n\n    for (var i = 0, codingSM; codingSM = this._mCodingSM[i]; i++) {\n      if (!codingSM) continue;\n      codingSM.active = true;\n      codingSM.reset();\n    }\n\n    this._mActiveSM = self._mCodingSM.length;\n    this._mDetectedCharset = null;\n  };\n\n  this.getCharsetName = function () {\n    return this._mDetectedCharset;\n  };\n\n  this.getConfidence = function () {\n    if (this._mDetectedCharset) {\n      return 0.99;\n    } else {\n      return 0.00;\n    }\n  };\n\n  this.feed = function (aBuf) {\n    for (var i = 0, c; i < aBuf.length; i++) {\n      c = aBuf[i];\n\n      for (var j = 0, codingSM; codingSM = this._mCodingSM[j]; j++) {\n        if (!codingSM || !codingSM.active) continue;\n        var codingState = codingSM.nextState(c);\n\n        if (codingState == constants.error) {\n          codingSM.active = false;\n          this._mActiveSM--;\n\n          if (this._mActiveSM <= 0) {\n            this._mState = constants.notMe;\n            return this.getState();\n          }\n        } else if (codingState == constants.itsMe) {\n          this._mState = constants.foundIt;\n          this._mDetectedCharset = codingSM.getCodingStateMachine();\n          return this.getState();\n        }\n      }\n    }\n\n    return this.getState();\n  };\n\n  init();\n}\n\nEscCharSetProber.prototype = new CharSetProber();\nmodule.exports = EscCharSetProber;","map":{"version":3,"sources":["D:/test/frontend/node_modules/jschardet/src/escprober.js"],"names":["CharSetProber","require","CodingStateMachine","escsm","constants","EscCharSetProber","apply","self","init","_mCodingSM","HZSMModel","ISO2022CNSMModel","ISO2022JPSMModel","ISO2022KRSMModel","reset","prototype","i","codingSM","active","_mActiveSM","length","_mDetectedCharset","getCharsetName","getConfidence","feed","aBuf","c","j","codingState","nextState","error","_mState","notMe","getState","itsMe","foundIt","getCodingStateMachine","module","exports"],"mappings":"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","sourcesContent":["/*\n * The Original Code is Mozilla Universal charset detector code.\n *\n * The Initial Developer of the Original Code is\n * Netscape Communications Corporation.\n * Portions created by the Initial Developer are Copyright (C) 2001\n * the Initial Developer. All Rights Reserved.\n *\n * Contributor(s):\n *   António Afonso (antonio.afonso gmail.com) - port to JavaScript\n *   Mark Pilgrim - port to Python\n *   Shy Shalom - original C code\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301  USA\n */\n\nvar CharSetProber = require('./charsetprober');\nvar CodingStateMachine = require('./codingstatemachine');\nvar escsm = require('./escsm');\nvar constants = require('./constants');\n\nfunction EscCharSetProber() {\n    CharSetProber.apply(this);\n\n    var self = this;\n\n    function init() {\n        self._mCodingSM = [\n            new CodingStateMachine(escsm.HZSMModel),\n            new CodingStateMachine(escsm.ISO2022CNSMModel),\n            new CodingStateMachine(escsm.ISO2022JPSMModel),\n            new CodingStateMachine(escsm.ISO2022KRSMModel)\n        ];\n        self.reset();\n    }\n\n    this.reset = function() {\n        EscCharSetProber.prototype.reset.apply(this);\n        for( var i = 0, codingSM; codingSM = this._mCodingSM[i]; i++ ) {\n            if( !codingSM ) continue;\n            codingSM.active = true;\n            codingSM.reset();\n        }\n        this._mActiveSM = self._mCodingSM.length;\n        this._mDetectedCharset = null;\n    }\n\n    this.getCharsetName = function() {\n        return this._mDetectedCharset;\n    }\n\n    this.getConfidence = function() {\n        if( this._mDetectedCharset ) {\n            return 0.99;\n        } else {\n            return 0.00;\n        }\n    }\n\n    this.feed = function(aBuf) {\n        for( var i = 0, c; i < aBuf.length; i++ ) {\n            c = aBuf[i];\n            for( var j = 0, codingSM; codingSM = this._mCodingSM[j]; j++ ) {\n                if( !codingSM || !codingSM.active ) continue;\n                var codingState = codingSM.nextState(c);\n                if( codingState == constants.error ) {\n                    codingSM.active = false;\n                    this._mActiveSM--;\n                    if( this._mActiveSM <= 0 ) {\n                        this._mState = constants.notMe;\n                        return this.getState();\n                    }\n                } else if( codingState == constants.itsMe ) {\n                    this._mState = constants.foundIt;\n                    this._mDetectedCharset = codingSM.getCodingStateMachine();\n                    return this.getState();\n                }\n            }\n        }\n\n        return this.getState();\n    }\n\n    init();\n}\nEscCharSetProber.prototype = new CharSetProber();\n\nmodule.exports = EscCharSetProber\n"]},"metadata":{},"sourceType":"script"}