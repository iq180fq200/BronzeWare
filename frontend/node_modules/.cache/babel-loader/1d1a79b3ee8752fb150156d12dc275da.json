{"ast":null,"code":"/*\n * The Original Code is Mozilla Universal charset detector code.\n *\n * The Initial Developer of the Original Code is\n * Netscape Communications Corporation.\n * Portions created by the Initial Developer are Copyright (C) 2001\n * the Initial Developer. All Rights Reserved.\n *\n * Contributor(s):\n *   António Afonso (antonio.afonso gmail.com) - port to JavaScript\n *   Mark Pilgrim - port to Python\n *   Shy Shalom - original C code\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301  USA\n */\nvar CodingStateMachine = require('./codingstatemachine');\n\nvar MultiByteCharSetProber = require('./mbcharsetprober');\n\nvar EUCJPDistributionAnalysis = require('./chardistribution').EUCJPDistributionAnalysis;\n\nvar EUCJPContextAnalysis = require('./jpcntx').EUCJPContextAnalysis;\n\nvar EUCJPSMModel = require('./mbcssm/eucjp');\n\nvar constants = require('./constants');\n\nvar logger = require('./logger');\n\nfunction EUCJPProber() {\n  MultiByteCharSetProber.apply(this);\n  var self = this;\n\n  function init() {\n    self._mCodingSM = new CodingStateMachine(EUCJPSMModel);\n    self._mDistributionAnalyzer = new EUCJPDistributionAnalysis();\n    self._mContextAnalyzer = new EUCJPContextAnalysis();\n    self.reset();\n  }\n\n  this.reset = function () {\n    EUCJPProber.prototype.reset.apply(this);\n\n    this._mContextAnalyzer.reset();\n  };\n\n  this.getCharsetName = function () {\n    return \"EUC-JP\";\n  };\n\n  this.feed = function (aBuf) {\n    var aLen = aBuf.length;\n\n    for (var i = 0; i < aLen; i++) {\n      var codingState = this._mCodingSM.nextState(aBuf[i]);\n\n      if (codingState == constants.error) {\n        logger.log(this.getCharsetName() + \" prober hit error at byte \" + i + \"\\n\");\n        this._mState = constants.notMe;\n        break;\n      } else if (codingState == constants.itsMe) {\n        this._mState = constants.foundIt;\n        break;\n      } else if (codingState == constants.start) {\n        var charLen = this._mCodingSM.getCurrentCharLen();\n\n        if (i == 0) {\n          this._mLastChar[1] = aBuf[0];\n\n          this._mContextAnalyzer.feed(this._mLastChar, charLen);\n\n          this._mDistributionAnalyzer.feed(this._mLastChar, charLen);\n        } else {\n          this._mContextAnalyzer.feed(aBuf.slice(i - 1, i + 1), charLen);\n\n          this._mDistributionAnalyzer.feed(aBuf.slice(i - 1, i + 1), charLen);\n        }\n      }\n    }\n\n    this._mLastChar[0] = aBuf[aLen - 1];\n\n    if (this.getState() == constants.detecting) {\n      if (this._mContextAnalyzer.gotEnoughData() && this.getConfidence() > constants.SHORTCUT_THRESHOLD) {\n        this._mState = constants.foundIt;\n      }\n    }\n\n    return this.getState();\n  };\n\n  this.getConfidence = function () {\n    var contxtCf = this._mContextAnalyzer.getConfidence();\n\n    var distribCf = this._mDistributionAnalyzer.getConfidence();\n\n    return Math.max(contxtCf, distribCf);\n  };\n\n  init();\n}\n\nEUCJPProber.prototype = new MultiByteCharSetProber();\nmodule.exports = EUCJPProber;","map":{"version":3,"sources":["D:/test/frontend/node_modules/jschardet/src/eucjpprober.js"],"names":["CodingStateMachine","require","MultiByteCharSetProber","EUCJPDistributionAnalysis","EUCJPContextAnalysis","EUCJPSMModel","constants","logger","EUCJPProber","apply","self","init","_mCodingSM","_mDistributionAnalyzer","_mContextAnalyzer","reset","prototype","getCharsetName","feed","aBuf","aLen","length","i","codingState","nextState","error","log","_mState","notMe","itsMe","foundIt","start","charLen","getCurrentCharLen","_mLastChar","slice","getState","detecting","gotEnoughData","getConfidence","SHORTCUT_THRESHOLD","contxtCf","distribCf","Math","max","module","exports"],"mappings":"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","sourcesContent":["/*\n * The Original Code is Mozilla Universal charset detector code.\n *\n * The Initial Developer of the Original Code is\n * Netscape Communications Corporation.\n * Portions created by the Initial Developer are Copyright (C) 2001\n * the Initial Developer. All Rights Reserved.\n *\n * Contributor(s):\n *   António Afonso (antonio.afonso gmail.com) - port to JavaScript\n *   Mark Pilgrim - port to Python\n *   Shy Shalom - original C code\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301  USA\n */\n\nvar CodingStateMachine = require('./codingstatemachine');\nvar MultiByteCharSetProber = require('./mbcharsetprober');\nvar EUCJPDistributionAnalysis = require('./chardistribution').EUCJPDistributionAnalysis;\nvar EUCJPContextAnalysis = require('./jpcntx').EUCJPContextAnalysis;\nvar EUCJPSMModel = require('./mbcssm/eucjp');\nvar constants = require('./constants');\nvar logger = require('./logger');\n\nfunction EUCJPProber() {\n    MultiByteCharSetProber.apply(this);\n\n    var self = this;\n\n    function init() {\n        self._mCodingSM = new CodingStateMachine(EUCJPSMModel);\n        self._mDistributionAnalyzer = new EUCJPDistributionAnalysis();\n        self._mContextAnalyzer = new EUCJPContextAnalysis();\n        self.reset();\n    }\n\n    this.reset = function() {\n        EUCJPProber.prototype.reset.apply(this);\n        this._mContextAnalyzer.reset();\n    }\n\n    this.getCharsetName = function() {\n        return \"EUC-JP\";\n    }\n\n    this.feed = function(aBuf) {\n        var aLen = aBuf.length;\n        for( var i = 0; i < aLen; i++ ) {\n            var codingState = this._mCodingSM.nextState(aBuf[i]);\n            if( codingState == constants.error ) {\n                logger.log(this.getCharsetName() + \" prober hit error at byte \" + i + \"\\n\");\n                this._mState = constants.notMe;\n                break;\n            } else if( codingState == constants.itsMe ) {\n                this._mState = constants.foundIt;\n                break;\n            } else if( codingState == constants.start ) {\n                var charLen = this._mCodingSM.getCurrentCharLen();\n                if( i == 0 ) {\n                    this._mLastChar[1] = aBuf[0];\n                    this._mContextAnalyzer.feed(this._mLastChar, charLen);\n                    this._mDistributionAnalyzer.feed(this._mLastChar, charLen);\n                } else {\n                    this._mContextAnalyzer.feed(aBuf.slice(i-1,i+1), charLen);\n                    this._mDistributionAnalyzer.feed(aBuf.slice(i-1,i+1), charLen);\n                }\n            }\n        }\n\n        this._mLastChar[0] = aBuf[aLen - 1];\n\n        if( this.getState() == constants.detecting ) {\n            if( this._mContextAnalyzer.gotEnoughData() &&\n                this.getConfidence() > constants.SHORTCUT_THRESHOLD ) {\n                this._mState = constants.foundIt;\n            }\n        }\n\n        return this.getState();\n    }\n\n    this.getConfidence = function() {\n        var contxtCf = this._mContextAnalyzer.getConfidence();\n        var distribCf = this._mDistributionAnalyzer.getConfidence();\n\n        return Math.max(contxtCf, distribCf);\n    }\n\n    init();\n}\nEUCJPProber.prototype = new MultiByteCharSetProber();\n\nmodule.exports = EUCJPProber\n"]},"metadata":{},"sourceType":"script"}