{"ast":null,"code":"var _jsxFileName = \"E:\\\\frontend\\\\src\\\\echarts\\\\map.jsx\";\nimport React from \"react\";\nimport ReactECharts from 'echarts-for-react'; // import 'echarts/map/js/china';\n// import geoJson from 'echarts/map/json/china.json';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Chinamap extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = () => {\n      this.bond(); // if (this.props.option) {\n      //     this.bond(this.props.option)\n      // }\n\n      window.addEventListener('resize', () => {\n        if (this.props && this.props.option && this.props.option.eleId) {\n          const dom = document.getElementById(this.props.option.eleId);\n\n          if (dom) {\n            const myChart = echarts.init(dom);\n            myChart.resize();\n          }\n        }\n      });\n    };\n\n    this.componentDidUpdate = () => {\n      this.bond(); // if (this.props.option) {\n      //     this.bond(this.props.option)\n      // }\n    };\n\n    this.updateOption = option => {};\n\n    this.bond = option => {\n      // if (!option) return;\n      const dom = document.getElementById('echartsMapId');\n      if (!dom) return;\n      const chart = echarts.init(dom); // this.updateOption(option);\n\n      chart.setOption(this.option);\n    };\n\n    this.render = () => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"echartsMapId\",\n        style: {\n          width: \"100\",\n          height: \"25rem\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 25\n      }, this);\n    };\n\n    this.option = {\n      title: {\n        text: '各省份使用情况',\n        subtext: '数据暂虚构',\n        left: 'center'\n      },\n      tooltip: {\n        trigger: 'item'\n      },\n      toolbox: {\n        show: true,\n        orient: 'vertical',\n        left: 'right',\n        top: 'center',\n        feature: {\n          mark: {\n            show: true\n          },\n          dataView: {\n            show: true,\n            readOnly: false\n          },\n          restore: {\n            show: true\n          },\n          saveAsImage: {\n            show: true\n          }\n        }\n      },\n      visualMap: {\n        min: 0,\n        max: 2500,\n        left: 'left',\n        top: 'bottom',\n        text: ['高', '低'],\n        // 文本，默认为数值文本\n        calculable: true\n      },\n      legend: {\n        orient: 'vertical',\n        left: 'left',\n        data: ['新增设计' //  'iphone4', 'iphone5'\n        ]\n      },\n      series: [{\n        name: '新增设计',\n        type: 'map',\n        mapType: 'china',\n        roam: false,\n        label: {\n          show: true // normal: {\n          //     show: false\n          // },\n          // emphasis: {\n          //     show: true\n          // }\n\n        },\n        data: [{\n          name: '北京',\n          value: Math.round(Math.random() * 1000)\n        }, {\n          name: '天津',\n          value: Math.round(Math.random() * 1000)\n        }, {\n          name: '上海',\n          value: Math.round(Math.random() * 1000)\n        }, {\n          name: '重庆',\n          value: Math.round(Math.random() * 1000)\n        }, {\n          name: '河北',\n          value: Math.round(Math.random() * 1000)\n        }, {\n          name: '河南',\n          value: Math.round(Math.random() * 1000)\n        }, {\n          name: '云南',\n          value: Math.round(Math.random() * 1000)\n        }, {\n          name: '辽宁',\n          value: Math.round(Math.random() * 1000)\n        }, {\n          name: '黑龙江',\n          value: Math.round(Math.random() * 1000)\n        }, {\n          name: '湖南',\n          value: Math.round(Math.random() * 1000)\n        }, {\n          name: '安徽',\n          value: Math.round(Math.random() * 1000)\n        }, {\n          name: '山东',\n          value: Math.round(Math.random() * 1000)\n        }, {\n          name: '新疆',\n          value: Math.round(Math.random() * 1000)\n        }, {\n          name: '江苏',\n          value: Math.round(Math.random() * 1000)\n        }, {\n          name: '浙江',\n          value: Math.round(Math.random() * 1000)\n        }, {\n          name: '江西',\n          value: Math.round(Math.random() * 1000)\n        }, {\n          name: '湖北',\n          value: Math.round(Math.random() * 1000)\n        }, {\n          name: '广西',\n          value: Math.round(Math.random() * 1000)\n        }, {\n          name: '甘肃',\n          value: Math.round(Math.random() * 1000)\n        }, {\n          name: '山西',\n          value: Math.round(Math.random() * 1000)\n        }, {\n          name: '内蒙古',\n          value: Math.round(Math.random() * 1000)\n        }, {\n          name: '陕西',\n          value: Math.round(Math.random() * 1000)\n        }, {\n          name: '吉林',\n          value: Math.round(Math.random() * 1000)\n        }, {\n          name: '福建',\n          value: Math.round(Math.random() * 1000)\n        }, {\n          name: '贵州',\n          value: Math.round(Math.random() * 1000)\n        }, {\n          name: '广东',\n          value: Math.round(Math.random() * 1000)\n        }, {\n          name: '青海',\n          value: Math.round(Math.random() * 1000)\n        }, {\n          name: '西藏',\n          value: Math.round(Math.random() * 1000)\n        }, {\n          name: '四川',\n          value: Math.round(Math.random() * 1000)\n        }, {\n          name: '宁夏',\n          value: Math.round(Math.random() * 1000)\n        }, {\n          name: '海南',\n          value: Math.round(Math.random() * 1000)\n        }, {\n          name: '台湾',\n          value: Math.round(Math.random() * 1000)\n        }, {\n          name: '香港',\n          value: Math.round(Math.random() * 1000)\n        }, {\n          name: '澳门',\n          value: Math.round(Math.random() * 1000)\n        }]\n      }]\n    };\n  }\n\n}","map":{"version":3,"sources":["E:/frontend/src/echarts/map.jsx"],"names":["React","ReactECharts","Chinamap","Component","constructor","props","componentDidMount","bond","window","addEventListener","option","eleId","dom","document","getElementById","myChart","echarts","init","resize","componentDidUpdate","updateOption","chart","setOption","render","width","height","title","text","subtext","left","tooltip","trigger","toolbox","show","orient","top","feature","mark","dataView","readOnly","restore","saveAsImage","visualMap","min","max","calculable","legend","data","series","name","type","mapType","roam","label","value","Math","round","random"],"mappings":"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","sourcesContent":["import React from \"react\";\r\n\r\nimport ReactECharts from 'echarts-for-react';\r\n\r\n// import 'echarts/map/js/china';\r\n// import geoJson from 'echarts/map/json/china.json';\r\n\r\n\r\nexport default class Chinamap extends React.Component{\r\n   \r\n    constructor(props) {\r\n        super(props);\r\n        this.option = {\r\n            title: {\r\n                text: '各省份使用情况',\r\n                subtext: '数据暂虚构',\r\n                left: 'center'\r\n            },\r\n            tooltip: {\r\n                trigger: 'item'\r\n            },\r\n            toolbox: {\r\n                show: true,\r\n                orient: 'vertical',\r\n                left: 'right',\r\n                top: 'center',\r\n                feature: {\r\n                    mark: { show: true },\r\n                    dataView: { show: true, readOnly: false },\r\n                    restore: { show: true },\r\n                    saveAsImage: { show: true }\r\n                }\r\n            },\r\n            visualMap: {\r\n                min: 0,\r\n                max: 2500,\r\n                left: 'left',\r\n                top: 'bottom',\r\n                text: ['高', '低'],           // 文本，默认为数值文本\r\n                calculable: true\r\n            },\r\n            legend: {\r\n                orient: 'vertical',\r\n                left: 'left',\r\n                data: ['新增设计',\r\n                //  'iphone4', 'iphone5'\r\n                ]\r\n            },\r\n            series: [\r\n                {\r\n                    name: '新增设计',\r\n                    type: 'map',\r\n                    mapType: 'china',\r\n                    roam: false,\r\n                    label: {\r\n                        show:true\r\n                        // normal: {\r\n                        //     show: false\r\n                        // },\r\n                        // emphasis: {\r\n                        //     show: true\r\n                        // }\r\n                    },\r\n                    data: [\r\n                        { name: '北京', value: Math.round(Math.random() * 1000) },\r\n                        { name: '天津', value: Math.round(Math.random() * 1000) },\r\n                        { name: '上海', value: Math.round(Math.random() * 1000) },\r\n                        { name: '重庆', value: Math.round(Math.random() * 1000) },\r\n                        { name: '河北', value: Math.round(Math.random() * 1000) },\r\n                        { name: '河南', value: Math.round(Math.random() * 1000) },\r\n                        { name: '云南', value: Math.round(Math.random() * 1000) },\r\n                        { name: '辽宁', value: Math.round(Math.random() * 1000) },\r\n                        { name: '黑龙江', value: Math.round(Math.random() * 1000) },\r\n                        { name: '湖南', value: Math.round(Math.random() * 1000) },\r\n                        { name: '安徽', value: Math.round(Math.random() * 1000) },\r\n                        { name: '山东', value: Math.round(Math.random() * 1000) },\r\n                        { name: '新疆', value: Math.round(Math.random() * 1000) },\r\n                        { name: '江苏', value: Math.round(Math.random() * 1000) },\r\n                        { name: '浙江', value: Math.round(Math.random() * 1000) },\r\n                        { name: '江西', value: Math.round(Math.random() * 1000) },\r\n                        { name: '湖北', value: Math.round(Math.random() * 1000) },\r\n                        { name: '广西', value: Math.round(Math.random() * 1000) },\r\n                        { name: '甘肃', value: Math.round(Math.random() * 1000) },\r\n                        { name: '山西', value: Math.round(Math.random() * 1000) },\r\n                        { name: '内蒙古', value: Math.round(Math.random() * 1000) },\r\n                        { name: '陕西', value: Math.round(Math.random() * 1000) },\r\n                        { name: '吉林', value: Math.round(Math.random() * 1000) },\r\n                        { name: '福建', value: Math.round(Math.random() * 1000) },\r\n                        { name: '贵州', value: Math.round(Math.random() * 1000) },\r\n                        { name: '广东', value: Math.round(Math.random() * 1000) },\r\n                        { name: '青海', value: Math.round(Math.random() * 1000) },\r\n                        { name: '西藏', value: Math.round(Math.random() * 1000) },\r\n                        { name: '四川', value: Math.round(Math.random() * 1000) },\r\n                        { name: '宁夏', value: Math.round(Math.random() * 1000) },\r\n                        { name: '海南', value: Math.round(Math.random() * 1000) },\r\n                        { name: '台湾', value: Math.round(Math.random() * 1000) },\r\n                        { name: '香港', value: Math.round(Math.random() * 1000) },\r\n                        { name: '澳门', value: Math.round(Math.random() * 1000) }\r\n                    ]\r\n                },\r\n            ]\r\n        };\r\n    };\r\n                componentDidMount = () => {\r\n                    this.bond()\r\n                    // if (this.props.option) {\r\n                    //     this.bond(this.props.option)\r\n                    // }\r\n                    window.addEventListener('resize', () => {\r\n                        if (this.props && this.props.option && this.props.option.eleId) {\r\n                            const dom = document.getElementById(this.props.option.eleId);\r\n                            if (dom) {\r\n                                const myChart = echarts.init(dom);\r\n                                myChart.resize();\r\n                            }\r\n                        }\r\n                    })\r\n                };\r\n            \r\n                componentDidUpdate = () => {\r\n                    this.bond()\r\n                    // if (this.props.option) {\r\n                    //     this.bond(this.props.option)\r\n                    // }\r\n                };\r\n            \r\n                updateOption = (option) => {\r\n            \r\n                };\r\n            \r\n                bond = (option) => {\r\n                    // if (!option) return;\r\n                    const dom = document.getElementById('echartsMapId');\r\n                    if (!dom) return;\r\n                    const chart = echarts.init(dom);\r\n                    // this.updateOption(option);\r\n                    chart.setOption(this.option);\r\n                };\r\n            \r\n                render = () => {\r\n                    return (\r\n                        <div id='echartsMapId' style={{ width: \"100\", height: \"25rem\" }} />\r\n                    )\r\n                };\r\n            \r\n  \r\n    \r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}