{"version":3,"file":"echarts-extension-amap.min.js","sources":["../src/helper.js","../src/AMapCoordSys.js","../src/AMapModel.js","../src/AMapView.js","../src/index.js","../index.js"],"sourcesContent":["import { version } from 'echarts/lib/echarts'\n\nexport const isV5 = version.split('.')[0] > 4\n\n/* global AMap */\n\n// `AMap.version` only exists in AMap 2.x\n// For AMap 1.x, it's `AMap.v`\n// use function instead of constant to allow importing the plugin before AMap is loaded\nexport const isAMap2X = () => AMap.version >= 2\n\nexport function v2Equal(a, b) {\n  return a && b && a[0] === b[0] && a[1] === b[1]\n}\n\nlet logMap = {}\n\nexport function logWarn(tag, msg, once) {\n  const log = `[ECharts][Extension][AMap]${tag ? ' ' + tag + ':' : ''} ${msg}`\n  once && logMap[log] || console.warn(log)\n  once && (logMap[log] = true)\n}\n\nexport function clearLogMap() {\n  logMap = {}\n}\n","import { util as zrUtil, graphic, matrix } from 'echarts/lib/echarts'\nimport { logWarn } from './helper'\n\nfunction dataToCoordSize(dataSize, dataItem) {\n  dataItem = dataItem || [0, 0];\n  return zrUtil.map(\n    [0, 1],\n    function(dimIdx) {\n      const val = dataItem[dimIdx]\n      const halfSize = dataSize[dimIdx] / 2\n      const p1 = []\n      const p2 = []\n      p1[dimIdx] = val - halfSize\n      p2[dimIdx] = val + halfSize\n      p1[1 - dimIdx] = p2[1 - dimIdx] = dataItem[1 - dimIdx]\n      return Math.abs(\n        this.dataToPoint(p1)[dimIdx] - this.dataToPoint(p2)[dimIdx]\n      )\n    },\n    this\n  )\n}\n\n// exclude private and unsupported options\nconst excludedOptions = [\n  'echartsLayerZIndex', // DEPRECATED since v1.9.0\n  'echartsLayerInteractive',\n  'renderOnMoving',\n  'largeMode',\n  'returnMapCameraState',\n  'layers'\n]\n\nfunction AMapCoordSys(amap, api) {\n  this._amap = amap\n  this._api = api\n  this._mapOffset = [0, 0]\n  // this.dimensions = ['lng', 'lat']\n}\n\nconst AMapCoordSysProto = AMapCoordSys.prototype\n\nAMapCoordSysProto.setZoom = function(zoom) {\n  this._zoom = zoom\n}\n\nAMapCoordSysProto.setCenter = function(center) {\n  const lnglat = new AMap.LngLat(center[0], center[1])\n  this._center = this._amap.lngLatToContainer(lnglat)\n}\n\nAMapCoordSysProto.setMapOffset = function(mapOffset) {\n  this._mapOffset = mapOffset\n}\n\nAMapCoordSysProto.setAMap = function(amap) {\n  this._amap = amap\n}\n\nAMapCoordSysProto.getAMap = function() {\n  return this._amap\n}\n\nAMapCoordSysProto.dataToPoint = function(data) {\n  const lnglat = new AMap.LngLat(data[0], data[1])\n  const px = this._amap.lngLatToContainer(lnglat)\n  const mapOffset = this._mapOffset\n  return [px.x - mapOffset[0], px.y - mapOffset[1]]\n}\n\nAMapCoordSysProto.pointToData = function(pt) {\n  const mapOffset = this._mapOffset\n  const lnglat = this._amap.containerToLngLat(\n    new AMap.Pixel(\n      pt[0] + mapOffset[0],\n      pt[1] + mapOffset[1]\n    )\n  )\n  return [lnglat.lng, lnglat.lat]\n}\n\nAMapCoordSysProto.getViewRect = function() {\n  const api = this._api\n  return new graphic.BoundingRect(0, 0, api.getWidth(), api.getHeight())\n}\n\nAMapCoordSysProto.getRoamTransform = function() {\n  return matrix.create()\n}\n\nAMapCoordSysProto.prepareCustoms = function() {\n  const rect = this.getViewRect()\n  return {\n    coordSys: {\n      // The name exposed to user is always 'cartesian2d' but not 'grid'.\n      type: 'amap',\n      x: rect.x,\n      y: rect.y,\n      width: rect.width,\n      height: rect.height\n    },\n    api: {\n      coord: zrUtil.bind(this.dataToPoint, this),\n      size: zrUtil.bind(dataToCoordSize, this)\n    }\n  }\n}\n\nAMapCoordSys.create = function(ecModel, api) {\n  let amapCoordSys\n  ecModel.eachComponent('amap', function(amapModel) {\n    if (typeof AMap === 'undefined') {\n      throw new Error('AMap api is not loaded')\n    }\n    if (amapCoordSys) {\n      throw new Error('Only one amap component can exist')\n    }\n    let amap = amapModel.getAMap()\n    const echartsLayerInteractive = amapModel.get('echartsLayerInteractive')\n    if (!amap) {\n      const root = api.getDom()\n      const painter = api.getZr().painter\n      const viewportRoot = painter.getViewportRoot()\n      viewportRoot.className = 'amap-ec-layer'\n      // PENDING not hidden?\n      viewportRoot.style.visibility = 'hidden'\n      // Not support IE8\n      let amapRoot = root.querySelector('.ec-extension-amap')\n      if (amapRoot) {\n        // Reset viewport left and top, which will be changed\n        // in moving handler in AMapView\n        viewportRoot.style.left = '0px'\n        viewportRoot.style.top = '0px'\n        root.removeChild(amapRoot)\n      }\n      amapRoot = document.createElement('div')\n      amapRoot.className = 'ec-extension-amap'\n      amapRoot.style.cssText = 'position:absolute;top:0;left:0;bottom:0;right:0;'\n      root.appendChild(amapRoot)\n\n      const options = zrUtil.clone(amapModel.get())\n      if ('echartsLayerZIndex' in options) {\n        logWarn('DEPRECATED', 'the option `echartsLayerZIndex` has been removed since v1.9.0, use `echartsLayerInteractive` instead.')\n      }\n      // delete excluded options\n      zrUtil.each(excludedOptions, function(key) {\n        delete options[key]\n      })\n\n      amap = new AMap.Map(amapRoot, options)\n\n      // PENDING: should update the model option when the user call map.setXXX?\n\n      // const nativeSetMapStyle = amap.setMapStyle\n      // const nativeSetLang = amap.setLang\n\n      // // PENDING\n      // amap.setMapStyle = function () {\n      //   nativeSetMapStyle.apply(this, arguments)\n      //   amapModel.__mapStyle = amap.getMapStyle()\n      // }\n\n      // // PENDING\n      // nativeSetLang && (amap.setLang = function() {\n      //   nativeSetLang.apply(this, arguments)\n      //   amapModel.__mapLang = amap.getLang()\n      // })\n\n      // use `complete` callback to avoid NPE when first load amap\n      amap.on('complete', function() {\n        amapRoot.querySelector('.amap-maps').appendChild(viewportRoot)\n        // PENDING\n        viewportRoot.style.visibility = ''\n      })\n\n      amapModel.setAMap(amap)\n      amapModel.setEChartsLayer(viewportRoot)\n\n      // Override\n      painter.getViewportRootOffset = function() {\n        return { offsetLeft: 0, offsetTop: 0 }\n      }\n    }\n\n    const oldEChartsLayerInteractive = amapModel.__echartsLayerInteractive\n    if (oldEChartsLayerInteractive !== echartsLayerInteractive) {\n      amapModel.setEChartsLayerInteractive(echartsLayerInteractive)\n      amapModel.__echartsLayerInteractive = echartsLayerInteractive\n    }\n\n    const center = amapModel.get('center')\n    const zoom = amapModel.get('zoom')\n    if (center && zoom) {\n      const amapCenter = amap.getCenter()\n      const amapZoom = amap.getZoom()\n      const centerOrZoomChanged = amapModel.centerOrZoomChanged(\n        [amapCenter.lng, amapCenter.lat],\n        amapZoom\n      )\n      if (centerOrZoomChanged) {\n        amap.setZoomAndCenter(zoom, new AMap.LngLat(center[0], center[1]))\n      }\n    }\n\n    // update map style(#13)\n    const originalMapStyle = amapModel.__mapStyle\n    const newMapStyle = amapModel.get('mapStyle')\n    if (originalMapStyle !== newMapStyle) {\n      amap.setMapStyle(amapModel.__mapStyle = newMapStyle)\n    }\n\n    // update map lang\n    // PENDING: AMap 2.x does not support `setLang` yet\n    if (amap.setLang) {\n      const originalMapLang = amapModel.__mapLang\n      const newMapLang = amapModel.get('lang')\n      if (originalMapLang !== newMapLang) {\n        amap.setLang(amapModel.__mapLang = newMapLang)\n      }\n    }\n    else {\n      logWarn('CAVEAT', 'The current map doesn\\'t support `setLang` API!', true)\n    }\n\n    amapCoordSys = new AMapCoordSys(amap, api)\n    amapCoordSys.setMapOffset(amapModel.__mapOffset || [0, 0])\n    amapCoordSys.setZoom(zoom)\n    amapCoordSys.setCenter(center)\n\n    amapModel.coordinateSystem = amapCoordSys\n  })\n\n  ecModel.eachSeries(function(seriesModel) {\n    if (seriesModel.get('coordinateSystem') === 'amap') {\n      seriesModel.coordinateSystem = amapCoordSys\n    }\n  })\n}\n\nAMapCoordSysProto.dimensions = AMapCoordSys.dimensions = ['lng', 'lat']\n\nexport default AMapCoordSys\n","import { ComponentModel } from 'echarts/lib/echarts'\nimport { isV5, v2Equal } from './helper'\n\nconst AMapModel = {\n  type: 'amap',\n\n  setAMap(amap) {\n    this.__amap = amap\n  },\n\n  getAMap() {\n    return this.__amap\n  },\n\n  setEChartsLayer(layer) {\n    this.__echartsLayer = layer\n  },\n\n  getEChartsLayer() {\n    return this.__echartsLayer\n  },\n\n  setEChartsLayerVisiblity(visible) {\n    this.__echartsLayer.style.display = visible ? 'block' : 'none'\n  },\n\n  // FIXME: NOT SUPPORT <= IE 10\n  setEChartsLayerInteractive(interactive) {\n    this.option.echartsLayerInteractive = !!interactive\n    this.__echartsLayer.style.pointerEvents = interactive ? 'auto' : 'none'\n  },\n\n  setCenterAndZoom(center, zoom) {\n    this.option.center = center\n    this.option.zoom = zoom\n  },\n\n  centerOrZoomChanged(center, zoom) {\n    const option = this.option\n    return !(v2Equal(center, option.center) && zoom === option.zoom)\n  },\n\n  defaultOption: {\n    center: [116.397428, 39.90923],\n    zoom: 5,\n    isHotspot: false,\n    resizeEnable: true,\n\n    // extension specific options\n    // echartsLayerZIndex: 2000, // DEPRECATED since v1.9.0\n    echartsLayerInteractive: true,\n    renderOnMoving: true,\n    largeMode: false,\n    // since v1.10.0\n    returnMapCameraState: false\n  }\n}\n\nexport default isV5\n  ? ComponentModel.extend(AMapModel)\n  : AMapModel\n","import { ComponentView, getInstanceByDom, throttle } from 'echarts/lib/echarts'\nimport { isV5, isAMap2X, clearLogMap } from './helper'\n\nlet _isAMap2X\n\nconst AMapView = {\n  type: 'amap',\n\n  init() {\n    this._isFirstRender = true\n\n    _isAMap2X = isAMap2X()\n  },\n\n  render(amapModel, ecModel, api) {\n    let rendering = true\n\n    const amap = amapModel.getAMap()\n    const viewportRoot = api.getZr().painter.getViewportRoot()\n    const offsetEl = amap.getContainer()\n    const coordSys = amapModel.coordinateSystem\n\n    const renderOnMoving = amapModel.get('renderOnMoving')\n    const resizeEnable = amapModel.get('resizeEnable')\n    const largeMode = amapModel.get('largeMode')\n    const returnMapCameraState = amapModel.get('returnMapCameraState')\n\n    const viewMode = amap.getViewMode_()\n    const is3DMode = viewMode === '3D'\n\n    let moveHandler = function(e) {\n      if (rendering) {\n        return\n      }\n\n      const offsetElStyle = offsetEl.style\n      const mapOffset = [\n        -parseInt(offsetElStyle.left, 10) || 0,\n        -parseInt(offsetElStyle.top, 10) || 0\n      ]\n      // only update style when map offset changed\n      const viewportRootStyle = viewportRoot.style\n      const offsetLeft = mapOffset[0] + 'px'\n      const offsetTop = mapOffset[1] + 'px'\n      if (viewportRootStyle.left !== offsetLeft) {\n        viewportRootStyle.left = offsetLeft\n      }\n      if (viewportRootStyle.top !== offsetTop) {\n        viewportRootStyle.top = offsetTop\n      }\n\n      coordSys.setMapOffset(amapModel.__mapOffset = mapOffset)\n\n      const actionParams = {\n        type: 'amapRoam',\n        animation: {\n          // compatible with ECharts 5.x\n          // no delay for rendering but remain animation of elements\n          duration: 0\n        }\n      }\n\n      if (returnMapCameraState) {\n        e = e || {}\n        let center = e.center\n        if (!center) {\n          // normalize center LngLat to Array\n          center = amap.getCenter()\n          center = [center.lng, center.lat]\n        }\n        actionParams.camera = {\n          viewMode,\n          center,\n          zoom: e.zoom || amap.getZoom(),\n          rotation: e.rotation == null ? amap.getRotation() : e.rotation,\n          pitch: e.pitch == null ? amap.getPitch() : e.pitch,\n          scale: amap.getScale(),\n          bounds: amap.getBounds()\n        }\n      }\n\n      api.dispatchAction(actionParams)\n    }\n\n    amap.off('mapmove', this._moveHandler)\n    amap.off('moveend', this._moveHandler)\n    amap.off('viewchange', this._moveHandler)\n    amap.off('camerachange', this._moveHandler)\n    amap.off('zoom', this._moveHandler)\n\n    if (this._resizeHandler) {\n      amap.off('resize', this._resizeHandler)\n    }\n    if (this._moveStartHandler) {\n      amap.off('movestart', this._moveStartHandler)\n    }\n    if (this._moveEndHandler) {\n      amap.off('moveend', this._moveEndHandler)\n      amap.off('zoomend', this._moveEndHandler)\n    }\n\n    amap.on(\n      renderOnMoving\n        ? (_isAMap2X\n          ? 'viewchange'\n          : is3DMode\n            ? 'camerachange'\n            : 'mapmove')\n        : 'moveend',\n      // FIXME: bad performance in 1.x in the cases with large data, use debounce?\n      // moveHandler\n      (!_isAMap2X && largeMode) ? (moveHandler = throttle(moveHandler, 20, true)) : moveHandler\n    )\n\n    this._moveHandler = moveHandler\n\n    if (renderOnMoving && !(_isAMap2X && is3DMode)) {\n      // need to listen to zoom if 1.x & 2D mode\n      // FIXME: unnecessary `mapmove` event triggered when zooming\n      amap.on('zoom', moveHandler)\n    }\n\n    if (!renderOnMoving) {\n      amap.on('movestart', this._moveStartHandler = function() {\n        setTimeout(function() {\n          amapModel.setEChartsLayerVisiblity(false)\n        }, 0)\n      })\n      const moveEndHandler = this._moveEndHandler = function(e) {\n        ;(!e || e.type !== 'moveend') && moveHandler(e)\n        setTimeout(function() {\n          amapModel.setEChartsLayerVisiblity(true)\n        }, _isAMap2X || !largeMode ? 0 : 20)\n      }\n      amap.on('moveend', moveEndHandler)\n      amap.on('zoomend', moveEndHandler)\n      if (this._isFirstRender && is3DMode) {\n        // FIXME: not rewrite AMap instance method\n        const nativeSetPicth = amap.setPitch\n        const nativeSetRotation = amap.setRotation\n        amap.setPitch = function() {\n          nativeSetPicth.apply(this, arguments)\n          moveEndHandler()\n        }\n        amap.setRotation = function() {\n          nativeSetRotation.apply(this, arguments)\n          moveEndHandler()\n        }\n      }\n    }\n\n    if (resizeEnable) {\n      let resizeHandler = function() {\n        getInstanceByDom(api.getDom()).resize()\n      }\n      if (!_isAMap2X && largeMode) {\n        resizeHandler = throttle(resizeHandler, 20, true)\n      }\n      amap.on('resize', this._resizeHandler = resizeHandler)\n    }\n\n    this._isFirstRender = rendering = false\n  },\n\n  dispose(ecModel) {\n    clearLogMap()\n    const component = ecModel.getComponent('amap')\n    if (component) {\n      component.getAMap().destroy()\n      component.setAMap(null)\n      component.setEChartsLayer(null)\n      if (component.coordinateSystem) {\n        component.coordinateSystem.setAMap(null)\n        component.coordinateSystem = null\n      }\n      delete this._moveHandler\n      delete this._resizeHandler\n      delete this._moveStartHandler\n      delete this._moveEndHandler\n    }\n  }\n}\n\nexport default isV5\n  ? ComponentView.extend(AMapView)\n  : AMapView\n","/**\n * AMap component extension\n */\n\nimport AMapCoordSys from './AMapCoordSys'\nimport AMapModel from './AMapModel'\nimport AMapView from './AMapView'\nimport { isV5 } from './helper'\n\nexport { version, name } from '../package.json'\n\nexport function install(registers) {\n  // Model\n  isV5\n    ? registers.registerComponentModel(AMapModel)\n    : registers.extendComponentModel(AMapModel)\n  // View\n  isV5\n    ? registers.registerComponentView(AMapView)\n    : registers.extendComponentView(AMapView)\n  // Coordinate System\n  registers.registerCoordinateSystem('amap', AMapCoordSys)\n  // Action\n  registers.registerAction(\n    {\n      type: 'amapRoam',\n      event: 'amapRoam',\n      update: 'updateLayout'\n    },\n    function(payload, ecModel) {\n      ecModel.eachComponent('amap', function(amapModel) {\n        const amap = amapModel.getAMap()\n        const center = amap.getCenter()\n        amapModel.setCenterAndZoom([center.lng, center.lat], amap.getZoom())\n      })\n    }\n  )\n}\n","/**\r\n * TODO use `echarts/core` rather than `echarts/lib/echarts`\r\n * to avoid self-registered `CanvasRenderer` and `DataSetComponent` in Apache ECharts 5\r\n * but it's not compatible with echarts v4. Leave it to 2.0.\r\n */\r\nimport * as echarts from 'echarts/lib/echarts'\r\nimport { install } from './src/index'\r\nimport { isV5 } from './src/helper'\r\n\r\nisV5 ? echarts.use(install) : install(echarts)\r\n\r\nexport { name, version } from './src/index'\r\n"],"names":["isV5","version","split","logMap","logWarn","tag","msg","once","log","console","warn","dataToCoordSize","dataSize","dataItem","zrUtil","map","dimIdx","val","halfSize","p1","p2","Math","abs","this","dataToPoint","excludedOptions","AMapCoordSys","amap","api","_amap","_api","_mapOffset","AMapCoordSysProto","prototype","setZoom","zoom","_zoom","setCenter","center","lnglat","AMap","LngLat","_center","lngLatToContainer","setMapOffset","mapOffset","setAMap","getAMap","data","px","x","y","pointToData","pt","containerToLngLat","Pixel","lng","lat","getViewRect","graphic","BoundingRect","getWidth","getHeight","getRoamTransform","matrix","create","prepareCustoms","rect","coordSys","type","width","height","coord","bind","size","ecModel","amapCoordSys","eachComponent","amapModel","Error","echartsLayerInteractive","get","root","getDom","painter","getZr","viewportRoot","getViewportRoot","className","style","visibility","amapRoot","querySelector","left","top","removeChild","document","createElement","cssText","appendChild","options","clone","each","key","Map","on","setEChartsLayer","getViewportRootOffset","offsetLeft","offsetTop","__echartsLayerInteractive","setEChartsLayerInteractive","amapCenter","getCenter","amapZoom","getZoom","centerOrZoomChanged","setZoomAndCenter","originalMapStyle","__mapStyle","newMapStyle","setMapStyle","setLang","originalMapLang","__mapLang","newMapLang","__mapOffset","coordinateSystem","eachSeries","seriesModel","dimensions","_isAMap2X","AMapModel","__amap","layer","__echartsLayer","getEChartsLayer","setEChartsLayerVisiblity","visible","display","interactive","option","pointerEvents","setCenterAndZoom","a","b","defaultOption","isHotspot","resizeEnable","renderOnMoving","largeMode","returnMapCameraState","ComponentModel","extend","AMapView","init","_isFirstRender","render","rendering","offsetEl","getContainer","viewMode","getViewMode_","is3DMode","moveHandler","e","offsetElStyle","parseInt","viewportRootStyle","actionParams","animation","duration","camera","rotation","getRotation","pitch","getPitch","scale","getScale","bounds","getBounds","dispatchAction","off","_moveHandler","_resizeHandler","_moveStartHandler","_moveEndHandler","throttle","setTimeout","moveEndHandler","nativeSetPicth","setPitch","nativeSetRotation","setRotation","apply","arguments","resizeHandler","getInstanceByDom","resize","dispose","component","getComponent","destroy","ComponentView","install","registers","registerComponentModel","extendComponentModel","registerComponentView","extendComponentView","registerCoordinateSystem","registerAction","event","update","payload","echarts","use"],"mappings":"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"}